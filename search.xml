<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue 反向代理</title>
      <link href="/2024/04/08/Vue%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/2024/04/08/Vue%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="反向代理使用背景：">反向代理使用背景：</h2><p>vue项目，前端代码在浏览器里面运行，由于浏览器的同源策略，不能直接发送跨域请求，导致请求发生跨域问题，错误如下图。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/20210413225420482.png" alt="在这里插入图片描述"></p><blockquote><p><strong>跨域的解决方案</strong>：</p><ul><li>jsonp(前端解决方案)</li><li>反向代理(前端解决方案)</li><li>CORS(后端解决方案):cross orign resource sharing</li></ul></blockquote><h2 id="什么是反向代理">什么是反向代理</h2><p>反向代理(Reverse Proxy)，以代理服务器来接收 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将请从服务器上得到的结果返回给 internet 上请求的客户端，此时代理服务器对外表现为一个服务器。</p><h2 id="反向代理配置">反向代理配置</h2><p>下面以 vue-cli3 为例，vue-cli版本不同，配置不方法不同，详情可点击<a href="https://lixiaoyan999.github.io/2024/04/08/vue-cli%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/">这里</a>。</p><p>项目根目录新建 <strong>vue.config.js</strong> 文件，并将如下代码放入文件中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 修改和配置后必须重启服务器后才能生效</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">lintOnSave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 配置关闭eslint  (代码会有红色热浪提示错 但不影响代码运行)</span>  <span class="token literal-property property">publicPath</span><span class="token operator">:</span> <span class="token string">'./'</span><span class="token punctuation">,</span>   <span class="token comment">// 打包路径，使用相对路径生成的dist文件夹下的index可以打开</span>  <span class="token literal-property property">outputDir</span><span class="token operator">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>  <span class="token comment">// 输入文件目录</span>  <span class="token literal-property property">productionSourceMap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">// 取消生成 map 文件</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">disableHostCheck</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启可以用自己的域名</span>    <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>   <span class="token comment">// 是否使用https协议 </span>    <span class="token literal-property property">hotOnly</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否开启热更新</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 开启跨域</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 代理服务器，一个proxy下可以配置多个代理。</span>      <span class="token string-property property">'/myapi'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://192.168.3.239:8082'</span><span class="token punctuation">,</span><span class="token comment">// 代理地址，http://192.168.3.30:8082</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>     <span class="token comment">// 是否开启代理 </span>        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment">//是否要代理 websocket</span>        <span class="token comment">//pathRewrite对请求路径进行重定向以匹配到正确的请求地址</span>        <span class="token comment">// 假设页面路由配置 /site/login?token=&amp;fnjdfjb&amp;12addaj</span>        <span class="token comment">// 本地请求地址为 http://localhos:8080/site/login?token=&amp;fnjdfjb&amp;12addaj</span>        <span class="token comment">// 解析后的地址为 http://192.168.3.239:8082/login?token=&amp;fnjdfjb&amp;12addaj</span>        <span class="token comment">// 重写路径  需要设置重写的话，要在后面的调用接口前加上/api 来代替target</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'^/site'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">//路由里的地址匹配 ： 替换后的地址</span>            <span class="token comment">// '^/upload': '/upload'    //（如果路由有公共部分 例如 /upload/xx/xx类型的，那代理就需要这么写或者直接不写pathRewrite这部分）</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项：<strong>配置或修改了proxy代理内容后</strong>一定要重启项目！！！</strong>，否则无效或者报错404.<strong>还有就是不要出现’/api’ 和’/api2’这样相似的，这样只会生效一个！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli查看各个版本的反向代理配置</title>
      <link href="/2024/04/08/vue-cli%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/04/08/vue-cli%E6%9F%A5%E7%9C%8B%E5%90%84%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>1.进入vue-cli 官网：<a href="https://cli.vuejs.org/zh/config/%EF%BC%9B">https://cli.vuejs.org/zh/config/；</a></p><p>2.点击 <strong>GitHub</strong>按钮；</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408114812054.png" alt="image-20240408114812054"></p><p>3.选中版本号(v3、v4配置都在文件夹下面的 docs/config/README.md);</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408114849986.png" alt="image-20240408114849986"></p><p>4.打开 <strong><a href="http://README.md">README.md</a></strong> 文件(所有的配置都在README.md文件中);</p><p>（1）v3 / v4版本</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408145210917.png" alt="image-20240408145210917"></p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408145422084.png" alt="image-20240408145422084"></p><p>(2)v2 版本。向下滑动找到 webpack，点击webpack文件，找到 <a href="http://proxy.md">proxy.md</a> （webpack/docs/proxy.md)</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408145649037.png" alt="image-20240408145649037"></p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240408150043197.png" alt="image-20240408150043197"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工具汇总</title>
      <link href="/2024/04/07/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/"/>
      <url>/2024/04/07/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="在线工具合集">在线工具合集</h2><ul><li><a href="https://f2er.club/">前端常用插件</a></li><li><a href="https://tool.lu/">开发类-在线工具合集-1</a></li><li><a href="http://www.cxy521.com/">开发类-在线工具合集-2</a></li></ul><h2 id="浏览器插件">浏览器插件</h2><ul><li><a href="https://www.crxsoso.com/">Crx-搜搜·浏览器扩展插件和应用商店</a></li><li><a href="https://www.baidufe.com/fehelper/index/index.html">FeHelper-代码格式化插件</a></li></ul><h2 id="前端特效">前端特效</h2><ul><li><a href="https://animate.style/">Animate.css-动画库</a></li><li><a href="http://www.superslide2.com/demo.html">SuperSlide-网站特效插件</a></li><li><a href="http://fullpage.81hu.com/">fullPage-全屏滚动插件</a></li></ul><h2 id="前端工具">前端工具</h2><ul><li><a href="https://code.visualstudio.com/">Visual studio code-开发工具-1</a></li><li><a href="https://www.dcloud.io/">Hbuilder-开发工具2</a></li><li><a href="https://echarts.apache.org/zh/index.html">Echarts-数据可视化框架</a></li><li><a href="https://www.chartjs.org/">Chart.js-数据可视化</a></li><li><a href="https://github.com/iamkun/dayjs">Day.js-日期/时间处理</a></li><li><a href="https://axios-http.com/">Axions-前端-后端开发Http请求</a></li><li><a href="https://www.underscorejs.cn/">Underscorejs-函数库</a></li><li><a href="https://www.kancloud.cn/liuwave/quill/1409423">quilly-富文本编辑器</a></li><li><a href="https://vee-validate.logaretm.com/v2/">vee-validata-表单验证</a></li><li><a href="https://fontawesome.com.cn/docs/v5/web">Font-Awesome-图标字体库</a></li></ul><h2 id="图片处理">图片处理</h2><ul><li><a href="https://tinypng.com/">Tinypng-图片无损压缩</a></li><li><a href="http://www.zuohaotu.com/">做好图-图片转换处理</a></li><li><a href="https://www.bitbug.net/">在线制作 icon 图标</a></li></ul><h2 id="其他">其他</h2><ul><li><a href="https://destiny001.gitee.io/color/">RGB颜色查询对照表-在线</a></li><li><a href="https://webgradients.com/?ref=usniemvuilaptrinh">css-背景色生成</a></li><li><a href="https://cssgradient.io/">css-渐变背景色生成</a></li><li><a href="https://api.paugram.com/help/wallpaper">随机动漫壁纸</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 添加本地搜索功能</title>
      <link href="/2024/04/07/Hexo%20%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/"/>
      <url>/2024/04/07/Hexo%20%E6%B7%BB%E5%8A%A0%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p><strong>功能介绍</strong></p><p>本地搜索是指搜索范围为当前用户所有博客，并非第三方搜索引擎比如百度、谷歌。</p><h2 id="1-安装依赖">1.安装依赖</h2><pre class="line-numbers language-none"><code class="language-none">npm install  hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-修改配置文件">2.修改配置文件</h2><p>修改hexo的 <strong>_congif.yml</strong> 的文件，在文件中添加：</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post  content: true  template: themes&#x2F;heyan&#x2F;search.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-导入-search-xml-文件">3.导入 ** search.xml** 文件</h2><p>导入模版文件 <strong>search.xml</strong> 文件或下载文件到主题文件中。模版地址(node_modules/hexo-generator-search/demo_output/search.xml)；<a href="https://github.com/wzpan/hexo-generator-search">下载地址</a>；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240407104043548.png" alt="image-20240407104043548" style="zoom:67%;" /><h2 id="4-添加-search-js">4.添加  <strong>search.js</strong></h2><p>(1) 在主题的 source 目录中添加 <strong>search.js</strong> 文件，<a href="https://github.com/wzpan/hexo-theme-freemind/blob/master/source/js/search.js">内容参考</a>。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240407104330776.png" alt="image-20240407104330776"></p><p>(2) 在 header.js 文件中添加引入 js。</p><blockquote><p>Tips: 引用 search.js 前需要检查主题组件是否引用 jquery.js 文件。</p><p>​本文引用的是jquery线上地址：<script src="https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"></script></p></blockquote> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">js</span><span class="token punctuation">(</span><span class="token string">'js/search.js'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">var</span> search_path <span class="token operator">=</span> <span class="token string">"&lt;%= config.search.path %>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>search_path<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>search_path <span class="token operator">=</span> <span class="token string">"search.xml"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string">"&lt;%= config.root %>"</span> <span class="token operator">+</span> search_path<span class="token punctuation">;</span><span class="token function">searchFunc</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'local-search-input'</span><span class="token punctuation">,</span> <span class="token string">'local-search-result'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 配置搜索输入框</p><blockquote><p>theme.search.placeholder 为主题 ._config.yml 文件中配置的 search对应的参数。</p><p>search:</p><p>enable: true  # 是否使用搜索功能</p><p>placeholder: 搜索什么？</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d-flex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local-search-input<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-control me-2 pe-4<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.search.placeholder%> <span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(4) 指定搜索结果的输出位置，并把搜索结果结果输出到 body 前面。</p><p>添加至主题的 <strong>layout.ejs</strong> 文件中，在&lt;%-body %&gt;前面添加搜索结果。指定id。</p><blockquote><p>Tips: <strong>id</strong>值不可修改，<strong>search.js</strong> 中的默认值</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>local-search-result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(5) 添加搜索功能完成，后续需要根据个人实际情况自行测试，调整样式。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240407105814529.png" alt="image-20240407105814529" style="zoom:67%;" /><p>参考博客地址：<a href="https://blog.csdn.net/smileyan9/article/details/124368376">https://blog.csdn.net/smileyan9/article/details/124368376</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS_CSR(CertificateSigningRequest)文件获取</title>
      <link href="/2024/04/02/IOS_CSR(CertificateSigningRequest)%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96/"/>
      <url>/2024/04/02/IOS_CSR(CertificateSigningRequest)%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-找到并打开工具【钥匙串访问】。">1.找到并打开工具【钥匙串访问】。</h2><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702723061330.png" alt="1702723061330"></p><h2 id="2-移动到桌面左上角-钥匙串访问-证书助理-从证书颁发机构请求证书">2.移动到桌面左上角 钥匙串访问 -&gt; 证书助理 -&gt; 从证书颁发机构请求证书</h2><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1977653-d452aefe12a5ec81.png" alt="img"></p><h2 id="3-进入到申请页面-。用户电子邮箱地址填你登陆开发者平台的账号-，项目选存储到硬盘，-后面申请开发-Development-证书和发布-Production-证书时需要用到-。">3.进入到申请页面 。用户电子邮箱地址填你登陆开发者平台的账号 ，项目选存储到硬盘， 后面申请开发(Development)证书和发布(Production)证书时需要用到 。</h2><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/3.%E8%AF%81%E4%B9%A6%E5%8A%A9%E7%90%86%E9%80%89%E9%A1%B9%E5%A1%AB%E5%86%99.jpg" alt="3.证书助理选项填写"></p><h2 id="4-选择【继续】，提示保存，存储到桌面即可-文件名默认-先不建议修改-都完成再修改不然后面步骤文件名不一样-，该文件后缀名不可更改。">4.选择【继续】，提示保存，存储到桌面即可(文件名默认,先不建议修改 都完成再修改不然后面步骤文件名不一样)  ，该文件后缀名不可更改。</h2><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/4.%E5%AD%98%E5%82%A8%E8%AF%81%E4%B9%A6%E5%8A%A9%E7%90%86.jpg" alt="4.存储证书助理"></p><h2 id="5-完成-证书请求文件-申请-这个文件只需要申请一次-后面都可以复用">5.完成 证书请求文件 申请 (这个文件只需要申请一次 后面都可以复用)</h2><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/5.%E5%AE%8C%E6%88%90%E8%AF%81%E4%B9%A6%E5%88%9B%E5%BB%BA.jpg" alt="5.完成证书创建"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> App Store </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo（图床使用方法）</title>
      <link href="/2024/04/02/PicGo%EF%BC%88%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/2024/04/02/PicGo%EF%BC%88%E5%9B%BE%E5%BA%8A%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言:</p><p>在使用Typora文档中插图图片时，如果是本地图片，那么在网站上发布时，就会因为转存失败而无法显示图片。如果将图片上传到github或gitee[2]上，那么在本地编辑时，图片就无法显示。</p><p>为了解决这个问题，需要先将图片上传到图床，并获取该图片的URL链接，再将该链接插入到markdown文档中，此时再进行网站上的发布，就可以正常显示图片了。</p><p>这里是利用picgo+typora+gitee搭建图床的过程。之所以没有用github，是因为某些时候，github的图片链接会失效，而gitee的图片链接则不会失效。</p></blockquote><h2 id="1-注册码云账号">1.注册码云账号</h2><p>码云是一个类似于github的网站，注册码云账号，用于存放图片。首先需要新建一个repo，用于存放图片。</p><p>(1)创建一个公开的仓库。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/创建gitee仓库.jpg" alt="创建gitee仓库" style="zoom:67%;" /><p>(2)创建完成后点击【初始化 Readme 文件】，完成初始化仓库。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330184528173.png" alt="image-20240330184528173" style="zoom:67%;" /><p>(3)获取 Token 令牌。</p><blockquote><p>1.设置gitee私人令牌，后续配置gitee图床是需要填写token。</p><p>2、私人令牌描述：配置图床仓库，方便自己阅读查找</p><p>3、令牌权限，根据个人需求勾选</p><p>4、提交设置，生成令牌。如果忘记也没事，重新生成即可。</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/生成token令牌.jpg" alt="生成token令牌" style="zoom:67%;" /><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330185201315.png" alt="image-20240330185201315" style="zoom:67%;" /><h2 id="2-PicGo图床">2.PicGo图床</h2><p>(1)下载。[官网地址][<a href="https://picgo.github.io/PicGo-Doc/zh/guide/#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85">https://picgo.github.io/PicGo-Doc/zh/guide/#下载安装</a>]</p><blockquote><p>PicGo.app和PicGo-Core的区别?</p><ul><li>PicGo.app 提供图形用户界面，而PicGo-Core只有命令行界面</li><li>PicGo-Core 上传图片耗费的计算机资源更少，只有在上传图片时进程才会运行，上传结束后(成功或失败)进程都会退出；PicGo.app 会一直保持运行，不会自动退出，而且由于是程序，因此消耗的资源会更多</li></ul></blockquote><p>(2)PicGo 本地配置。</p><p>(2.1)由于下载的版本没有预设gitee图床,所以需要先在插件设置中下载安装插件,结果如图(已安装完成)</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330185826380.png" alt="image-20240330185826380"></p><p>(2.2)点击图床设置进入 Gitee 图床的设置，结果如下：</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330190643466.png" alt="image-20240330190643466"></p><blockquote><p>Tips: repo填写仓库名。部分用户gitee网址显示名称与仓库显示不一致，以网址名称为准。如 “lxywzh/111”；</p></blockquote><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330190238034.png" alt="image-20240330190238034"></p><p>(2.3)至此已完成配置。手动点击【设为默认图床】按钮。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330190704396.png" alt="image-20240330190704396"></p><p>(2.4)如果出现错误,都可以在日志文件中找到错误信息</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330190802593.png" alt="image-20240330190802593"></p><h2 id="3-Typora配置PicGo">3.Typora配置PicGo</h2><p>(1)打开Typora，文件—偏好设置–图像—打开配置文件。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330191012295.png" alt="image-20240330191012295" style="zoom:67%;" /><p>(2)配置完成后，点击【验证图片上传项】,验证成功。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330191234358.png" alt="image-20240330191234358"></p><p>##End</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> Typora </tag>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于npm 安装依赖 和 dependencies 和 devdependencies 的使用 和 描述</title>
      <link href="/2024/04/02/%E5%85%B3%E4%BA%8Enpm%20%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%20%E5%92%8C%20dependencies%20%E5%92%8C%20devdependencies%20%E7%9A%84%E4%BD%BF%E7%94%A8%20%E5%92%8C%20%E6%8F%8F%E8%BF%B0/"/>
      <url>/2024/04/02/%E5%85%B3%E4%BA%8Enpm%20%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%20%E5%92%8C%20dependencies%20%E5%92%8C%20devdependencies%20%E7%9A%84%E4%BD%BF%E7%94%A8%20%E5%92%8C%20%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="npm-install-命令">npm install 命令</h3><pre class="line-numbers language-none"><code class="language-none">npm install xxx 下载安装包到node_modelusnpm install xxx@1.x.x 可以精确下载某个版本npm install --save xxx 下载的安装包信息写入到package.json 中的dependencies列表中npm install --save-dev xxx 下载的安装包信息写入到package.json 中的devDependencies列表中npm install -g xxx 下载模块到全部npm uninstall xxx 或 npm uninstall -g xxx 卸载模块npm uninstall -all 全部卸载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装">安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install 安装dependencies 和devdependencies 中的所有npm包npm install xxx --save-prod 只安装单个模块npm install --production 仅安装dependencies下所有的npm包npm install xxx --save-dev 只安装单个模块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目前绝大部分前端的项目使用了npm包管理项目中所用到的模块依赖.</p><h3 id="npm的5中依赖">npm的5中依赖</h3><ul><li>dependencies 代码运行(或者是上线所必须的)需要的依赖；</li><li>devDependencies 本地开发需要用的依赖,比如 编译、打包、测试、格式化模块等；</li><li>peerDependencies 需要宿主环境提供模块依赖（一般这个模块是为了给引用方提供服务时设置依赖）；</li><li>buundledDependencies 数组格式中抱恨了被打包进本地package中的模块名，通过npm pack 命令生成一个模块包；</li><li>optionalDependencies 放一些可以忽略各种错误的包模块，和dependencies 一样，可有可无</li></ul><h3 id="线上环境">线上环境</h3><p>如果项目区分 dependencies 和 devDependencies</p><p>必须使用install --production 来上线使用 这样会很大程度上减少文件的大小</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo引入图床，不显示图片的问题</title>
      <link href="/2024/04/02/%E8%A7%A3%E5%86%B3hexo%E5%BC%95%E5%85%A5%E5%9B%BE%E5%BA%8A%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%92%8Cweb%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2024/04/02/%E8%A7%A3%E5%86%B3hexo%E5%BC%95%E5%85%A5%E5%9B%BE%E5%BA%8A%EF%BC%8C%E6%89%8B%E6%9C%BA%E5%92%8Cweb%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%9B%BE%E7%89%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题描述">1.问题描述</h2><p>Hexo文章中采用图床方式加载的图片无法成功加载。</p><h2 id="2-问题原因">2.问题原因</h2><p>####2.1Referer含义</p><p>HTTP协议在请求(request)的头信息里面， 设计了一个<strong>Referer</strong>字段，提供访问来源的信息。这个字段是可选的，客户端发送请求的时候，可以自主决定是否加上该字段。</p><h3 id="2-2Referer的常见作用">2.2Referer的常见作用</h3><p>(1)用户行为日志记录访问来源；</p><p>(2)防盗链。部分网站不允许图片外链，只允许本网站才能显示图片，外部网站加载图片就会报错。通过对请求方的<strong>Referer</strong>进行判断过滤，确认是否可以访问。</p><h3 id="2-3Referrer-Policy的设置方法">2.3Referrer Policy的设置方法</h3><p>引用策略(Referrer Policy)就是文档发出请求时，是否在请求头部定义 <strong>Referrer</strong> 的设置。一般浏览器的默认值是：==no-referrer-when-downgrade==。</p><p>(1)HTTP头部信息：服务器发送网页的时候，通过HTTP响应头中的 Referrer-Policy 字段告诉浏览器。</p><pre class="line-numbers language-none"><code class="language-none">Content-Security-Policy: referrer | no-referrer | no-referrer-when-downgrade | origin | orign-when-cross-orign | unsafe-url;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)** meta**标签：使用 meta标签，在网页头部设置</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer | no-referrer-when-downgrade | origin | orign-when-cross-orign | unsafe-url&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3)referrerplicy属性： a、area、img、iframe 和 link 标签，可以设置referrerpolicy属性。</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;&quot; referrerpolicy&#x3D;&quot;orign&quot;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-解决办法">3.解决办法</h2><p>【Hingle主题】主题文件夹内的(themes\hingle\layout_partial) <strong>head.ejs</strong>文件中，添加meta信息</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&quot;referrer&quot; content&#x3D;&quot;no-referrer&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-重新生成hexo">4.重新生成hexo</h2><pre class="line-numbers language-none"><code class="language-none">hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录app上架APP Store全流程</title>
      <link href="/2024/04/02/%E8%AE%B0%E5%BD%95app%E4%B8%8A%E6%9E%B6APP%20Store%E5%85%A8%E6%B5%81%E7%A8%8B/"/>
      <url>/2024/04/02/%E8%AE%B0%E5%BD%95app%E4%B8%8A%E6%9E%B6APP%20Store%E5%85%A8%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-申请苹果开发者账号">1.申请苹果开发者账号</h2><p>注册苹果开发者账号，并且加入“IOS Developer Mac OS 10.9以上系统”。</p><ul><li>打开<a href="https://appleid.apple.com/account">苹果id注册地址</a>，输入相关信息；</li><li>注册成功了，或者有苹果账号了，登录<a href="https://appleid.apple.com/sign-in">苹果开发者中心</a>;</li><li>用iPhone，在【App Developer】 app 安装并且安装提示相关信息和缴费。</li><li>按照提示完成所有操作，等待邮箱成功的邮件即可。(缴费成功后24-48小时邮箱收到购买成功信息)。</li></ul><h2 id="2-创建唯一标示符App-IDs">2.创建唯一标示符App IDs</h2><p>(1) 进入 <a href="https://developer.apple.com/account/resources/identifiers/list">苹果开发者中心</a>，选择 Indentifiers 点击右边【蓝色+号】；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.1-苹果开发者登录首页.png" alt="2.1-苹果开发者登录首页" style="zoom:50%;" /><p>(2) 在打开的【添加Identifier】按步骤点击下图红框标注的部分，如下图所示。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.2-Identifiers列表.png" alt="2.2-Identifiers列表" style="zoom: 50%;" /><p>(3) 选择添加的Identifie id 的类型为App IDs，点击【Continue 】 按钮，进入下一步；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.2-选择APP IDs.png" alt="2.2-选择APP IDs" style="zoom: 67%;" /><p>(4) 选择 Identifie 对应的类型为 【App】,点击【Continue】按钮，进入下一步；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.3-选择类型.png" alt="2.3-选择类型" style="zoom: 67%;" /><p>(5) 填写注册App ID的内容，填写下图红框选中部分的内容【Description】和【Bundle ID】；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.4-填写APP ID信息及功能.png" alt="2.4-填写APP ID信息及功能" style="zoom: 67%;" /><p>(6) 选择App Capabilities，在注册页面下方的Capabilities 中选择一下选项:</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.4-功能服务.jpg" alt="2.4-功能服务" style="zoom: 50%;" /><p>(7) 选择完成后点击【Continue】按钮，然后在点击【Register】按钮，Identifiers列表新增的APP ID信息，代表注册成功。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2.5-提交APP IDs信息.png" alt="2.5-提交APP IDs信息" style="zoom: 67%;" /><h2 id="3-申请APP发布密码">3.申请APP发布密码</h2><p>打开[apple id][<a href="https://appleid.apple.com/">https://appleid.apple.com/</a>]管理中心，登录开发者账号。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E7%94%9F%E6%88%90APP-ID%E5%AF%86%E7%A0%81.jpg" alt="生成APP-ID密码"></p><h2 id="4-申请发布证书-描述文件">4.申请发布证书 / 描述文件</h2><h3 id="4-1-Windows系统">4.1 Windows系统</h3><blockquote><p>申请前准备：</p><ol><li><p>先去<a href="https://www.applicationloader.net/">App Uploader官网</a>下载windows版本的工具。</p></li><li><p>下载好工具然后打开，用之前的开发者账号登录。</p></li></ol></blockquote><h4 id="4-1-1-申请发布证书">4.1.1 申请发布证书</h4><p>(1) 点击左侧证书管理，然后点击右上角创建 。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/696b7c6df644455299b10ad2d8bb861f.png" alt="在这里插入图片描述"></p><p>（2） 点击创建之后进入创建证书流程，根据你是要测试/发布，选择不同的证书 。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/d3023891d2a64557b3f7fe154f716ee5.png" alt="在这里插入图片描述"></p><p>（2.1）  如果是测试选择如下</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/e80c89b4f5a84863a8b1ab12eb823948.png" alt="在这里插入图片描述"></p><p>(2.2) 如果是要上架appstore选择如下：</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/633e5cac5c494df59e6642105c2adf66.png" alt="在这里插入图片描述"></p><p>(3)  选择好类型后然后按要求，填好证书名称和密码，密码记得要保存，后面打包需要用到。然后点击证书对应的另存为保存到电脑，后续打包会用到。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/778411b10e564259b69a7efe71fcb7c0.png" alt="在这里插入图片描述"></p><h4 id="41-2申请描述文件">41.2申请描述文件</h4><p>(1) 点击左侧描述文件管理，然后点击右上角创建 。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/09e1e5e5f06e498bbaafd4909241fdae.png" alt="在这里插入图片描述"></p><p>（2）  描述文件名称随意填写，类型根据你需求来;</p><blockquote><p>选择开发创建时顺便选择测试设备，打测试包时需要配置测试机信息</p></blockquote><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/94309ada1c9a43de83f7cb8170c80fc8.png" alt="在这里插入图片描述"></p><p>(3)  如果之前步骤都没问题，Bundle ID点击下拉会出现选项，证书也会出现对应类型的证书，比如你选的类型是iOS应用开发，则会出现你创建的对应的开发版证书，勾选证书。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/01dd9e13cdcc46be9113497392fe15b8.png" alt="在这里插入图片描述"></p><p>(4)  添加测试设备，用iphone连接电脑并信任，会自动识别到，或者通过右侧添加测试设备按钮通过uuid来添加</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/2e1f2fbaa915403c91b0aedb01b24328.png" alt="在这里插入图片描述"></p><p>(5)  最后确认之后你可以生成对应的开发版或者appstore版本描述文件，然后点击描述文件下载，保存到电脑，后面打包需要用到</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/edf9c7db5a894759bb7692ae7b2ac03f.png" alt="在这里插入图片描述"></p><p>###4.2 IOS 系统（使用mac 苹果电脑）</p><h4 id="4-2-1-申请开发证书">4.2.1 申请开发证书</h4><p>(1) 进入<a href="https://developer.apple.com/account/resources/certificates/list">苹果开发者中心</a>，选择 Certificates 点击右边【蓝色+号】；</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702723385734.png" alt="1702723385734"></p><p>(2) 根据开发需求选择对应的证书类型，然后点击 【Continue】;( Development 为开发证书，Distribution为发布证书 )</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702723664846.png" alt="1702723664846"></p><p>(3)  接下来需要用到刚刚生成的证书请求文件（钥匙串访问工具生成的文件），点击【“Choose File…”】选择刚刚保存到本地的 “CertificateSigningRequest.certSigningRequest”文件，点击 【Continue】 生成证书文件：</p><blockquote><p>Tips：创建Certificate Signing Request方法请点击<a href="https://lixiaoyan999.github.io/2024/04/02/IOS_CSR(CertificateSigningRequest)%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96/">这里</a>，注：需要一台苹果电脑</p></blockquote><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702723870302.png" alt="1702723870302"></p><p>(4) 证书生成成功，返回证书列表，选择证书，点击 【Download】 将证书下载至本地。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702724002911.png" alt="1702724002911"></p><h4 id="4-2-2-生成-p12-文件">4.2.2 生成 .p12 文件</h4><p>(1)打开刚才下载的文件  双击文件，生成一条证书信息；</p><blockquote><p>注意事项：</p><ul><li><p>如果双击ios_development.cer文件没有打开钥匙串访问，关闭钥匙串进程即可; (结束进程快捷键 command+option+esc)；</p></li><li><p>证书一定有效的不然导出的格式不对(踩坑);</p></li><li><p>检测&quot;Apple Worldwide Developer Relations Certification Authority&quot;这个证书给删除了导致，如下图红色方框所示：</p></li></ul><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E4%B8%8D%E4%BF%A1%E4%BB%BB%E8%AF%81%E4%B9%A6.jpg" alt="不信任证书"></p></blockquote><blockquote><p>解决方案:</p><p>①重新下载&quot;Apple Worldwide Developer Relations Certification Authority&quot;证书并安装,进入苹果官网的支持模块下载，链接地址：<a href="https://www.apple.com/certificateauthority/">Apple PKI - Apple</a>。<img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702724718377.png" alt="1702724718377" style="zoom:67%;" /></p></blockquote><blockquote><p>②找到对应证书方法： 双击不受信任的证书找到组织单位</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E8%AF%81%E4%B9%A6%E6%89%80%E5%B1%9E%E7%9A%84%E9%98%BB%E6%AD%A2%E5%8D%95%E4%BD%8D.jpg" alt="证书所属的阻止单位"></p></blockquote><blockquote><p>③回到官网下载对应G3(下载即可 无需多余操作)  <img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702724703620.png" alt="1702724703620"></p></blockquote><blockquote><p>④然后把下载后的证书拖到登陆&gt;证书里面  。重新双击打开项目，问题解决。 <img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E6%8B%96%E5%85%A5%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6.jpg" alt="拖入安全证书"></p></blockquote><p>(2) 在证书列表找到 .cer 生成的文件。右击导出项目 <img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E5%AF%BC%E5%87%BA%E9%A1%B9%E7%9B%AE.jpg" alt="导出项目"></p><p>(3)选择.p12格式的，如果无法选择.p12格式的那么证书是不受信任的。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E9%80%89%E6%8B%A9-p12-%E6%A0%BC%E5%BC%8F%E8%AF%81%E4%B9%A6.jpg" alt="img"></p><p>(4)这个密码是uniapp后面打包需要使用到的一定要记住 。至此，我们已经完成了开发证书的全部流程。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81.jpg" alt="输入密码"></p><h4 id="4-2-3添加测试设备">4.2.3添加测试设备</h4><blockquote><p>Tips：如果需要测试安装包，则需要添加测试设备；如需要测试，该步骤可以省略。</p></blockquote><p>(1)在左侧功能栏选择 “Devices” ，在打开的页面中点击 “Register a New Device”;</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240329184844665.png" alt="image-20240329184844665" style="zoom: 50%;" /><p>(2) 在注册新设备页面输入设备名称和设备的UDID，点击 “Continue” 按钮；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240329185116079.png" alt="image-20240329185116079" style="zoom: 50%;" /><p>(3) 进入添加设备确认页，该页面会显示刚才添加设备的信息。确认无误，点击 “Reigster” 按钮完成添加设备。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1774399-6a697fa26db59452.png" alt="img" style="zoom:67%;" /><h4 id="4-2-4-申请描述文件">4.2.4 申请描述文件</h4><p>(1)进入<a href="https://developer.apple.com/account/resources/certificates/list">苹果开发者中心</a>，，选择 Profiles 点击右边【蓝色+号】；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702725348417.png" alt="1702725348417" style="zoom:67%;" /><p>(2)根据开发需求选择对应类型的， 然后点击 【Continue】</p><blockquote><p>iOS打包时常用的的三种类型的Profile<br>Development: 开发调试<br>Ad Hoc: 内部测试<br>App Store：上线到苹果商店时用到</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702725533191.png" alt="1702725533191" style="zoom:67%;" /><p>(3)这里要选择之前创建的 “App ID” ，点击“Continue”：</p> <img src="https://gitee.com/lxywzh/blogs-img/raw/master/描述文件-选择APP-ID.jpg" alt="描述文件-选择APP-ID" style="zoom: 80%;" /><p>(4) 选择设备，选择在 添加设备 步骤时添加的设备。</p><blockquote><p>Tips：此时选择的设备可以安装测试安装包，如果不选择则打出来的安装包不能在此设备中安装。</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1774399-a97d4e3f1f5fd863.png" alt="img" style="zoom:80%;" /><p>(5)  接下来输入描述文件的名称, 点击 “Generate” 生成描述文件：</p><blockquote><p>Profile命名建议：</p><p>Development: xxForDeBug</p><p>Ad Hoc(内部测试): xxForAdHoc</p><p>App Store: xxForAppStore</p><p>注：xx为App的Identifie最后字段，如 com.lan.less，则建议xxx为less。</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/输入描述文件名称.jpg" alt="输入描述文件名称" style="zoom:80%;" /><p>(6)  然后点击 “Download” 将描述文件下载到本地（文件后缀为 .mobileprovision） ；</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1774399-44eb6b4adbb4f4ec.png" alt="img" style="zoom:80%;" /><h2 id="5-选择证书编译打包">5.选择证书编译打包</h2><p>以uniapp使用Hbuilderx打appstore包为例 ， Bundle ID和密码还有证书和描述文件都是之前生成好的，等待云打包完成，然后下载ipa安装包。</p><blockquote><p>1.Bundle ID：填写前面流程中 2.4 创建App ID时填写的 Bundle ID值；</p><p>2.证书私钥密码：填写前面流程 3.申请App发布密码中生成的密码；</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330123000046.png" alt="image-20240330123000046" style="zoom: 80%;" /> <h2 id="6-创建APP并填写信息">6.创建APP并填写信息</h2><blockquote><p>Tips：根据法律最新规定，App Store上传APP需要获得App备案信息，请务必提前申请App备案号。</p></blockquote><p>(1) 进入 <a href="https://appstoreconnect.apple.com/apps">App Store Connect</a> ,点击【蓝色+号】，新建APP</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702721511105.png" alt="1702721511105"></p><p>(2) 选择平台 【ios】，填入ID</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330164851738.png" alt="image-20240330164851738" style="zoom:67%;" /><p>(3) 创建好APP之后进入应用详情页，将App相关信息，销售价格，App隐私等配置好。这里因为不是通用配置，按照自己需求来即可。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330165941780.png" alt="image-20240330165941780" style="zoom: 67%;" /><p>(4)  按照屏幕尺寸上传应用截图，描述信息，技术支持网址，版权信息等等。</p><blockquote><ul><li>应用截图可以使用在线工具<a href="https://www.yunedit.com/update/jietu/index">屏幕截图</a>完成; 注意尺寸大小;</li><li>如果只发布手机，不发布ipad，不要上传ipad尺寸；</li><li>技术支持网站自己建立H5网站，这个网站内容必须包含技术支持电话；</li><li>如果APP使用相册，扫一扫，麦克风等功能，需要在uniapp项目中的 mainfest.json 文件中填写描述信息</li></ul></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330165503057.png" alt="image-20240330165503057" style="zoom: 50%;" /><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330165606615.png" alt="image-20240330165606615" style="zoom: 50%;" /><p>(5)  所有信息都填好了，点击右上角【存储】保存相关信息。</p><h2 id="7-上传IPA到App-Store">7. 上传IPA到App Store</h2><h3 id="7-1-Windows-系统">7.1 Windows 系统</h3><p>(1)打开【App Uploader】软件，点击右侧提交上传，右上角选择IPA，选择我们上一节打包好的ipa文件，然后等待上传完成。  <img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330165831449.png" alt="image-20240330165831449" style="zoom: 50%;" /></p><p>(2) 注意这里上传有可能会报上传报错，可能是你所在的网络对某些ip访问做了限制。这时候可以用手机开个热点重新上传，基本都能上传成功。上传成功之后，稍微等待几分钟，然后登录App Store Connect,找到TestFlight选项，查看你所上传的版本正在处理，等待处理完成，会显示准备提交。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E6%8F%90%E4%BA%A4%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC.jpg" alt="提交构建版本"></p><h3 id="7-2-IOS系统">7.2 IOS系统</h3><p>在应用商店购买和下载 “Transporter”， 登录开发者账号。只要将安装包拖拽放到 “Transporter” 中即可开始使用。可同时验证和上传多个文件交付。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240330171215323.png" alt="image-20240330171215323"></p><h2 id="8-构建版本">8. 构建版本</h2><p>(1)选择构建版本，上节中的版本显示准备提交后，这里会出现蓝色加号可以选择版本。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E6%8F%90%E4%BA%A4%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC.jpg" style="zoom:67%;" /><p>(2) 选择好版本，然后点击右上角存储，存储完成再点击右上角提交以供审核。至此，我们的APP已经成功提交到appstore，耐心等待审核结果就行。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/640" alt="图片"></p><h2 id="9-上传ipa-文件时遇到的常见问题及解决方法">9.上传ipa 文件时遇到的常见问题及解决方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>什么是<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90478</span>和<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90062</span>错误？在提交应用到App Store时，如果出现<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90478</span>和<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90062</span>错误，通常是因为当前上传的版本号小于已经上传到App Store的版本号。具体来说，<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90478</span>错误表示上传的版本号小于之前已上传的构建版本号，而<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90062</span>错误表示上传的版本号小于之前已上架的版本号。<span class="token number">2.</span> 解决方法为了解决<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90478</span>和<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90062</span>错误，我们需要确保新上传的版本号大于之前已上传或上架的版本号。下面是解决方法的具体步骤：<span class="token number">2.1</span> 确定当前的版本号和构建号首先，我们需要确定当前应用的版本号和构建号。版本号是由三个数字组成的，如<span class="token number">1.0</span><span class="token number">.0</span>，而构建号则是一个单独的数字。<span class="token number">2.2</span> 递增版本号和构建号接下来，我们需要递增版本号和构建号，确保新上传的版本号大于之前已上传或上架的版本号。根据苹果的规定，版本号应该是递增的，且新上传的构建号必须大于之前已上传的构建号。<span class="token number">2.3</span> 再次尝试提交应用在完成版本号和构建号的递增后，我们可以重新尝试提交应用到App Store。确保在提交之前，版本号和构建号已经正确设置，并且大于之前已上传或上架的版本号。总结通过正确设置版本号和构建号，我们可以避免<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90478</span>和<span class="token constant">ITMS</span><span class="token operator">-</span><span class="token number">90062</span>错误的发生，并成功将应用提交到App Store。时刻关注这些细节，确保应用顺利上架，以提供更好的用户体验。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-安装ipa">10.安装ipa</h2><p>(1) 使用【爱思助手】 接上手机、点击应用游戏，点击导入安装，选择刚打包的ipa包 <img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702722681831.png" alt="1702722681831"></p><p>(2)ipa将自动安装，类型是越狱版，安装成功后显示个人正版或其他正版，因为是个人ios证书打包，没上架App Store 。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/1702722749100.png" alt="1702722749100"></p><p>(3)安装成功了第一次启动应用会出现如下提示，用测试证书或者企业证书打包的ipa都会这样，需要设置一下。</p><p>点击设置、进入通用，下拉选择描述文件和设备管理。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E6%9C%AA%E6%A0%87%E9%A2%98-12.jpg" alt="未标题-12"></p><p>(4)点击开发者应用下面出现的账号，信任，然后就能启动应用，不在出现提示。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/%E6%9C%AA%E6%A0%87%E9%A2%98-13.jpg" alt="未标题-13"></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP Store </tag>
            
            <tag> uniApp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TYPORA中文快速上手使用教程</title>
      <link href="/2024/04/02/TYPORA%E4%B8%AD%E6%96%87%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/04/02/TYPORA%E4%B8%AD%E6%96%87%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-标题">1.标题</h3><p>​具体语法:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 一级标题，快捷键为 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ctrl + 1</span><span class="token template-punctuation string">`</span></span>## 二级标题，快捷键为 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ctrl + 2</span><span class="token template-punctuation string">`</span></span><span class="token operator">...</span>以此类推###### 六级标题，快捷键为 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ctrl + 6</span><span class="token template-punctuation string">`</span></span> 注：####### 追逐梦想（最大只支持到<span class="token number">6</span>个#号）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-增强（加粗）">2.<strong>增强（加粗）</strong></h3><p>​    具体语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">**</span>这里是你想输入的内容<span class="token operator">**</span>，快捷键为 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Ctrl + B</span><span class="token template-punctuation string">`</span></span>__这里是你想输入的内容，双下划线__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​效果如下：</p><p>​追逐梦想 ——&gt; <strong>追逐梦想</strong></p><h3 id="3-倾斜">3.<strong>倾斜</strong></h3><p>​    具体语法：</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">*单个星号*_双单下划线_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    效果如下：</p><p>​追逐梦想 ——&gt; <em>追逐梦想</em></p><h3 id="4-删除线">4.<strong>删除线</strong></h3><p>​具体语法：</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">~~里面输入你想要画删除线的内容~~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果如下：</p><p>​追逐梦想 ——&gt; <s>追逐梦想</s></p><h3 id="5-下划线">5.<strong>下划线</strong></h3><p>​具体语法(由来源HTML的标签代码实现)：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>u</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>u</span><span class="token punctuation">></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果如下：</p><p>​追逐梦想 ——&gt; <u>追逐梦想</u></p><h3 id="6-代码标记">6.<strong>代码标记</strong></h3><p>​具体语法：使用反引号` (在英文输入法下，ESC键下面和1键左边的符号 ):</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">&gt; 一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果如下：</p><p>​Function() ——&gt; <code>Function()</code></p><h3 id="7-反转义符号">7.<strong>反转义符号</strong></h3><p>​/（反斜杠），使其后的符号成为普通符号，不加特效。</p><h3 id="8-自行决定字体、字号与颜色">8.<strong>自行决定字体、字号与颜色</strong></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">指定字体类型： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>楷体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是楷体字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果：<font face="楷体">我是楷体字</font></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">指定字体大小： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>10</span><span class="token punctuation">></span></span>我是10号字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果：<font size=10>我是10号字</font></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">指定字体颜色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#0099ff</span><span class="token punctuation">></span></span>我是蓝色字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span> #0099ff 为颜色的16进制代码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果：<font color=#0099ff>我是蓝色字</font></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">指定字体颜色、字号、字体类型<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>#0099ff</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>12</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>楷体<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>楷体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果：<font color=#0099ff size=12 face="楷体">楷体</font></p><h3 id="9-引用-可以叠加效果">9.<strong>引用(可以叠加效果)</strong></h3><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">&gt; 我只愿面朝大海，春暖花开。——海子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果如下:</p><blockquote><p>我只愿面朝大海，春暖花开。——海子</p></blockquote><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">&gt;&gt; 我只愿面朝大海，春暖花开。——海子<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​效果如下：</p><blockquote><blockquote><p>我只愿面朝大海，春暖花开。——海子</p></blockquote></blockquote><h3 id="10-无序清单">10.<strong>无序清单</strong></h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">##un-ordered list*   Red*   Green*   Blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​效果如下：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><h3 id="11-有序清单">11.<strong>有序清单</strong></h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">## ordered list1.  Red2. Green3.Blue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h3 id="12-任务清单">12.任务清单</h3><pre class="line-numbers language-less" data-language="less"><code class="language-less">- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [ ] incomplete- [x] completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ul><li>[ ] a task list item</li><li>[ ] list syntax required</li><li>[ ] normal <strong>formatting</strong>, @mentions, #1234 refs</li><li>[ ] incomplete</li><li>[ ] completed</li></ul><h3 id="13-代码块">13.<strong>代码块</strong></h3><p>​在Typora中输入``` + 回车，并在后面选择一个语言名称即可语法高亮。</p><p>效果如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;Hello world!&quot;);&#x2F;&#x2F;这里选择了C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="14-水平尺">14.<strong>水平尺</strong></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">##绘制一条水平线。--- 或者 ***<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>效果如下：</p><hr><h3 id="15-内嵌链接">15.<strong>内嵌链接</strong></h3><p>要创建内联链接，请在链接文本的右方括号之后使用一组常规括号。在圆括号内，将URL放在您希望链接指向的位置，以及链接的可选标题，用引号括起来。例如:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">This is [an example](http:&#x2F;&#x2F;example.com&#x2F; &quot;Title&quot;) inline link.[This link](http:&#x2F;&#x2F;example.net&#x2F;) has no title attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p>This is <a href="http://example.com/">an example</a> inline link.</p><p><a href="http://example.net/">This link</a> has no title attribute.</p><h3 id="16-内部链接">16.<strong>内部链接</strong></h3><p>要创建一个内部链接以创建一个“书签”，使您可以在单击该部分后跳至该部分，请使用标题元素的名称作为href。</p><h3 id="17-参考链接">17.<strong>参考链接</strong></h3><p>使用两组方括号，在其中放置您选择的标签来标识链接：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label on a line by itself like this:[id]: http:&#x2F;&#x2F;example.com&#x2F;  &quot;Optional Title Here&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：（类似于C语言的define宏定义）</p><p>This is <a href="http://example.com/">an example</a> reference-style link.</p><p>Then, anywhere in the document, you define your link label on a line by itself like this:</p><p><a href="http://google.com/">Google</a> And then define the link: <a href="http://google.com/">Google</a>: <a href="http://google.com/">http://google.com/</a></p><h3 id="18-隐式链接">18.<strong>隐式链接</strong></h3><p>隐式链接名称快捷方式允许您省略链接的名称，在这种情况下，链接文本本身用作名称。只需使用一组空的方括号-例如，将单词“ Google”链接到google.com网站，您可以简单地编写：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">[Google][]And then define the link:[Google]: http:&#x2F;&#x2F;google.com&#x2F;#【在Typora中，单击链接会将其展开以进行编辑，而Ctrl +单击将在Web浏览器中打开超链接。 】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​效果如下：</p><p>​<a href="http://google.com/">Google</a></p><h3 id="19-URLs（直接插入网址）">19.<strong>URLs（直接插入网址）</strong></h3><pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;i@typora.io>&lt;www.baidu.com><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​效果如下：</p><p>​<a href="mailto:i@typora.io">i@typora.io</a></p><p>​&lt;<a href="http://www.baidu.com">www.baidu.com</a>&gt;</p><h3 id="20-图片">20.<strong>图片</strong></h3><p>图像的语法与链接相似，但是<code>!</code>在链接开始之前需要额外的字符。插入图像的语法如下所示：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">![Alt text]<span class="token punctuation">(</span>/path/to/img.jpg<span class="token punctuation">)</span>![Alt text]<span class="token punctuation">(</span>/path/to/img.jpg <span class="token string">"Optional title"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>您可以使用拖放操作从图像文件或Web浏览器插入图像。您可以通过单击图像来修改降价源代码。如果通过拖放添加的图像与当前正在编辑的文档位于同一目录或子目录中，则将使用相对路径。</p><p><img src="https://img2020.cnblogs.com/blog/1618094/202004/1618094-20200401200950307-966714954.jpg" alt="img"></p><p>上图是图片的链接，TYPORA实际将其隐藏。</p><h3 id="21-表情符号">21.<strong>表情符号</strong></h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">:smile:cry:computer mouse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​效果如下：</p><p>​😄</p><p>​😢</p><p>​🖱️</p><p>使用者可以通过使用<code>ESC</code>键触发表情建议补全功能，也可在功能面板启用后自动触发此功能。同时，直接从菜单栏<code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code>插入UTF8表情符号也是可以的。</p><h3 id="22-数学公式">22.<strong>数学公式</strong></h3><p>你可以通过使用<strong>MathJax</strong>来实现<em>LaTeX</em>的数学符号的表达。</p><p>输入<code>$$</code>，然后按下<code>Enter</code>键就会弹出一个支持TeX/LaTeX语法的输入框，下面是一个栗子：</p><pre class="line-numbers language-fsharp" data-language="fsharp"><code class="language-fsharp">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D; \begin&#123;vmatrix&#125;\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \end&#123;vmatrix&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​效果如下：（ 要触发嵌入式数学的嵌入式预览：输入“ $”，然后<code>ESC</code>按键，然后输入TeX命令。 ）<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} <br>\frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 <br>\frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 <br>end{vmatrix}<br>$$</p><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">$$x_1^2+x_2^3&#x3D;9$$$$\sqrt[4]&#123;\frac xy&#125;$$$$\begin&#123;pmatrix&#125;1 &amp; 2 \\ 3 &amp; 4\\ \end&#123;pmatrix&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​效果如下：（ 要触发嵌入式数学的嵌入式预览：输入“ $”，然后<code>ESC</code>按键，然后输入TeX命令。 ）<br>$$<br>x_12+x_23=9<br>$$</p><p>$$<br>\sqrt[4]{\frac xy}<br>$$</p><p>$$<br>\begin{pmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{pmatrix}<br>$$</p><p>​想了解更多可以跳转这个网址： &lt; <a href="http://support.typora.io/Math/">http://support.typora.io/Math/</a> &gt;</p><h3 id="23-表格">23.<strong>表格</strong></h3><p>输入<code>|标题一|标题二|</code>然后按下<code>Enter</code>将会创建一个有两个列的表格。</p><p>表格创建之后，你会看到一个顶部工具栏也会随之出现，通过工具栏你可以实现调整大小，增添和删除表格的功能，你也可以使用</p><p>下面的描述可以跳过，因为表格的源码语法是Typora自动生成的。</p><table><thead><tr><th>标题一</th><th>标题二</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><p>或者按照md语法：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">| First Header  | Second Header || ------------- | ------------- || Content Cell  | Content Cell  || Content Cell  | Content Cell  |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​效果如图：</p><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><p>你也可以修饰内部的文本格式，比如链接、粗体、斜体、删除线等。</p><p>最后，通过使用冒号<code>：</code>你可以实现标题栏文字的对齐功能，比如向左对齐、向右对齐和居中对齐：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">| Left-Aligned  | Center Aligned  | Right Aligned || :------------ |:---------------:| -----:|| col 3 is      | some wordy text | $1600 || col 2 is      | centered        |   $12 || zebra stripes | are neat        |    $1 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th style="text-align:left">Left-Aligned</th><th style="text-align:center">Center Aligned</th><th style="text-align:right">Right Aligned</th></tr></thead><tbody><tr><td style="text-align:left">col 3 is</td><td style="text-align:center">some wordy text</td><td style="text-align:right">$1600</td></tr><tr><td style="text-align:left">col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td style="text-align:left">zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><p>最左侧的<code>：</code>是向左对齐；最右侧的<code>：</code>是向右对齐；两侧各一个<code>：</code>是居中对齐。</p><h3 id="24-目录">24.<strong>目录</strong></h3><p>输入<code>［toc］</code>然后按下<code>Enter</code>就会产生一个自动根据标题和标题等级自动创建的目录框。</p><h3 id="25-示意图">25.<strong>示意图</strong></h3><p>Typora支持 <a href="https://link.zhihu.com/?target=https%3A//bramp.github.io/js-sequence-diagrams/">sequence</a>, <a href="https://link.zhihu.com/?target=http%3A//flowchart.js.org/">flowchart</a> 和 <a href="https://link.zhihu.com/?target=https%3A//knsv.github.io/mermaid/%23mermaid">mermaid</a>，之后的版本将会在设置面板中实现设置。</p><h3 id="26-目录-TOC">26.<strong>目录(TOC)</strong></h3><p>输入<code>[toc]</code>并<code>Return</code>按键以创建“目录”部分。TOC会从文档中提取所有标题，并且当您添加到文档时，其内容会自动更新。</p><h3 id="27-下标">27.<strong>下标</strong></h3><p>要使用此功能，请首先在<code>Markdown</code>首选项面板的选项卡中启用它。然后，用于<code>~</code>包装下标内容。例如：<code>H~2~O</code>，<code>X~long\ text~</code>/</p><p>（ 注意在 <em>file&gt; preferences&gt; syntax support</em> 中找到 <strong>superscript</strong> 和 <strong>subscript</strong> 选项，打上勾。 ）</p><p>​效果如下：</p><p>H~2~O</p><p>X~long\ text~</p><h3 id="28-上标">28.<strong>上标</strong></h3><p>用于<code>^</code>包装上标内容。例如：<code>X^2^</code>。</p><p>X^2^</p><h3 id="29-高亮">29.<strong>高亮</strong></h3><p>要使用此功能，请首先在<code>Markdown</code>首选项面板的选项卡中启用它。然后，用于<code>==</code>包装突出显示的内容。例如：<code>==highlight==</code>。</p><p>效果如下：</p><p>==highlight==。</p><h3 id="30-视频">30.<strong>视频</strong></h3><p>您可以使用<video>HTML标签嵌入视频。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git相关</title>
      <link href="/2024/04/02/git/"/>
      <url>/2024/04/02/git/</url>
      
        <content type="html"><![CDATA[<h3 id="git常用命令"><strong>git常用命令</strong></h3><pre class="line-numbers language-none"><code class="language-none">git init-- 初始化git生成git仓库git status-- 查看git状态git add-- 添加文件到暂存区git commit-- 提交变更文件到本地仓库git pull-- 将远程主机的最新内容拉到本地   pull会把所有的提交自动合并到当前分支git fetch-- 从远程获取最新版本到本地，不会自动merge。   fetch只是把拉取的提交存储到本地仓库，真正合并到主分支中需要使用mergegit merge-- 合并分支git push-- 提交到远程git stash--  将一个修改后的工作区中的改动保存起来，将工作区恢复到改动前的状态。git log-- 查看提交记录日志git branch-- 查看所有分支git reflog-- 查看所有的操作记录git rebase-- 重新排列base，base指commitgit remote-- 创建、查看和删除本地仓库与其他代码仓库之间的连接git clone-- 初始拉取项目git cherry-pick -- 将指定的提交（commit）应用于其他分支。git reset &lt;filename&gt;  -- 重置到某个commit的状态--hard ：不保存所有变更--soft：保留变更且变更内容处于Staged--mixed：保留变更且变更内容处于Modifiedgit checkout &lt;name&gt; &lt;template&gt;-- 创建新分支&lt;name&gt;：新分支的名字&lt;template&gt;：指以哪个分支或者commit 为模板 git checkout &lt;branchname&gt;          -- 切换到指定分支git checkout -b &lt;name&gt; &lt;template&gt;    -- 切换指定分支（进入自己的分支）master(主干)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用提交步骤">常用提交步骤</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git stash    <span class="token operator">--</span> 查看git状态git add <span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token operator">--</span> 添加文件到暂存区git add <span class="token punctuation">.</span>    <span class="token operator">--</span> 加入所有文件到暂存区git commite <span class="token operator">-</span>m <span class="token string">'message'</span>  <span class="token operator">--</span> 提交变更文件到本地仓库git pull                              <span class="token operator">--</span> 拉取远程分支项目git push                              <span class="token operator">--</span> 提交到远程自己分支 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="git本地创建分支提交至github">git本地创建分支提交至github</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#未确定好，复习完学习视频后重新编辑。git fetch <span class="token operator">--</span> 查看远程仓库分支信息git branch <span class="token operator">--</span> 查看本地分支git branch 分支名称                          <span class="token operator">--</span> 创建本地分支         git checkout <span class="token operator">&lt;</span>branchname<span class="token operator">></span>          <span class="token operator">--</span> 切换到指定分支git merge 来源分支<span class="token operator">--</span> 合并分支git push <span class="token operator">--</span>set<span class="token operator">-</span>upstream origin bc<span class="token operator">-</span>a <span class="token operator">--</span> 设置上流分支<span class="token operator">--</span>set<span class="token operator">-</span>upstream是指设置上流分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件状态">文件状态</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>没有被add过的文件叫untracked<span class="token number">2</span><span class="token punctuation">.</span>add之后文件处于staged状态等待commite<span class="token number">3</span><span class="token punctuation">.</span>commit之后文件处于unmodified这里之所以是modified是因为文件会跟仓库中的文件对比<span class="token number">4.</span>当unmodified的文件被修改则会变为modified状态<span class="token number">5</span><span class="token punctuation">.</span>modified之后的文件add之后将继续变为staged状态<span class="token number">6</span><span class="token punctuation">.</span>unmodifed的文件还有一种可能是已经不再需要了，那么可以remove它不再追踪变为untracked状态<span class="token number">1</span><span class="token punctuation">.</span>Untracked<span class="token operator">:</span>新建文件<span class="token number">2</span><span class="token punctuation">.</span>Unmodified：<span class="token number">3</span><span class="token punctuation">.</span>Modified：<span class="token number">4</span><span class="token punctuation">.</span>Staged：git add之后，文件状态为Staged<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="一些解决方法">一些解决方法</h3><h4 id="git撤销">git撤销</h4><p>1.执行了 git add . 后发现文件错误，使用git restore --staged 撤销暂缓区的提交的文件</p><pre class="line-numbers language-none"><code class="language-none">命令：git restore --staged <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.本地修改了 但是改错了 或者 不想要本地的修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">命令：git checkout <span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="git回退版本">git回退版本</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>查看版本所有提交的版本号：git log<span class="token number">2.</span>如果自己本地有修改的内容还没有提交 需要先备份<span class="token number">3.</span><span class="token function">确定回退到指定版本号：</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>git reset <span class="token operator">&lt;</span>filename<span class="token operator">></span> <span class="token operator">--</span><span class="token function">hard</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>回退到上一个版本  <span class="token operator">^</span> 的数量代表回退第几个版本 <span class="token punctuation">,</span> 一个<span class="token operator">^</span> 代表回退上一个版本<span class="token punctuation">,</span>       两个<span class="token operator">^</span> 代表回退上一个的上一个版本：git reset <span class="token operator">--</span>hard <span class="token constant">HEAD</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>回退到第上<span class="token number">100</span>版本：git reset <span class="token operator">--</span>hard <span class="token constant">HEAD</span><span class="token operator">~</span><span class="token number">100</span><span class="token number">3.</span>强制将本地代码同步到远程仓库：git push origin master <span class="token operator">--</span>force，master主分支   ###此方式不建议<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多人修改同一分支导致报错">多人修改同一分支导致报错</h4><blockquote><p>在本地修改了a文件，然后我们pull 或者push ，如果远程分支下a文件也有修改，这个时候就会 出现冲突</p></blockquote><ol><li><p>如果本地修改的少或者无关紧要的话 可以放弃本地修改 git checkout . 然后git pull</p></li><li><p>git pull 更新代码出现冲突的解决方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>将没有commit的代码修改放在堆栈中：git stash <span class="token number">2.</span>拉取远程分支（此时本地分支会回滚到上次commit的情况，你的改动都存在stash中）：git pull  <span class="token number">3.</span>将stash中改动重新加回本地分支：git stash pop <span class="token number">4.</span>如果改好了：git add <span class="token punctuation">.</span> <span class="token operator">-</span><span class="token operator">></span> git commit <span class="token operator">-</span>m <span class="token string">'message'</span> <span class="token operator">-</span><span class="token operator">></span> git pull <span class="token operator">-</span><span class="token operator">></span> git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 git pull 更新代码的时候出现冲突</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git add <span class="token punctuation">.</span>↓git commit <span class="token operator">-</span>m <span class="token string">'message'</span>↓在pull的时候出现冲突↓git pull↓这个时候需要解决本地的冲突再一次的提交↓git add <span class="token punctuation">.</span>↓git commit <span class="token operator">-</span>m <span class="token string">'message'</span>↓git pull↓git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在git pull --rebase 或者 git rebase 分支名 之后如果有合并冲突 使用一下方法解决</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>git rebase <span class="token operator">--</span>abort 放弃合并， 回到rebase操作之前，如果时git pull <span class="token operator">--</span>rebase  就会恢复到pull之前 ，如果时  git rebase 分支名 就会 恢复到合并之前<span class="token number">2</span><span class="token punctuation">.</span>git rebase <span class="token operator">--</span>skip 会将冲突 commit 丢弃（警告 尽量不要使用）<span class="token number">3</span><span class="token punctuation">.</span>git rebase <span class="token operator">--</span><span class="token keyword">continue</span>  相当于 git commit <span class="token operator">-</span>m <span class="token string">'注释'</span>；<span class="token number">4</span><span class="token punctuation">.</span>git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="git-commit-m-‘message’-报错">git commit -m ‘message’ 报错</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">方法一：跳过验证：git commit <span class="token operator">-</span>m <span class="token string">"message"</span> <span class="token operator">--</span>no<span class="token operator">-</span>verify方法二：删除验证规则 不建议这么做。删除<span class="token punctuation">.</span>git的提交规则文件<span class="token operator">:</span> rm <span class="token operator">-</span>rf <span class="token punctuation">.</span><span class="token operator">/</span>git<span class="token operator">/</span>hooks<span class="token operator">/</span>pre<span class="token operator">-</span>commit方法三：根据规则把代码改好在提交<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    下面了解一下pre<span class="token operator">-</span>commitpre<span class="token operator">-</span>commit 是验证代码使用的钩子在pre<span class="token operator">-</span>commit 中加一些规则可以在 git commit <span class="token operator">-</span>m ‘ 注释’ 提交之前验证 （如果验证不通过阻止提交）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成安卓签名</title>
      <link href="/2024/04/02/%E7%94%9F%E6%88%90%E5%AE%89%E5%8D%93%E7%AD%BE%E5%90%8D/"/>
      <url>/2024/04/02/%E7%94%9F%E6%88%90%E5%AE%89%E5%8D%93%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>打开cmd<span class="token number">2.</span><span class="token literal-property property">路径切换至android</span><span class="token operator">:</span> cd <span class="token punctuation">.</span>android<span class="token number">3.</span>安装签名：<span class="token string">"C:\Program Files\Java\jdk-17\bin\keytool.exe"</span> <span class="token operator">-</span>genkey <span class="token operator">-</span>alias testalias <span class="token operator">-</span>keyalg <span class="token constant">RSA</span> <span class="token operator">-</span>keysize <span class="token number">2048</span> <span class="token operator">-</span>validity <span class="token number">36500</span> <span class="token operator">-</span>keystore <span class="token string">"E:\Android_certificate\lan.keystore"</span>（# 注：【<span class="token constant">C</span>盘】路径为java环境位置，【<span class="token constant">E</span>盘】为签名自定义存放位置<span class="token punctuation">,</span>【validity <span class="token number">36500</span>】为证书有效期<span class="token number">10</span>年）<span class="token number">4.</span><span class="token function">制作签名填写资料：</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>密钥口令<span class="token operator">:</span><span class="token function">android</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">姓氏</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">组织单位名称</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">组织名称</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">所在城市区域</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>所在的省<span class="token operator">/</span>市<span class="token operator">/</span><span class="token function">区</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>地区代码<span class="token number">5.</span>确认信息：输入 y <span class="token number">6.</span>制作签名成功<span class="token number">7.</span><span class="token function">查询证书：</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>不包含md5信息：<span class="token string">"C:\Program Files\Java\jdk-19\bin\keytool.exe"</span> <span class="token operator">-</span>list <span class="token operator">-</span>v <span class="token operator">-</span>keystore <span class="token string">"E:\Android_certificate\lan.keystore"</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>包含md5信息：<span class="token string">"C:\Program Files\Java\jdk-19\bin\keytool.exe"</span> <span class="token operator">-</span>list <span class="token operator">-</span>v <span class="token operator">-</span>keystore <span class="token string">"E:\Android_certificate\lan.keystore"</span> <span class="token operator">|</span> <span class="token string">"C:\Program Files\OpenSSL-Win64\bin\openssl.exe"</span> dgst <span class="token operator">-</span>md5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">证书信息：<span class="token number">1.</span>证书包名：com<span class="token punctuation">.</span>lan<span class="token punctuation">.</span>mm<span class="token number">2.</span>证书别名：testalias<span class="token number">3.</span>证书私钥密码：android<span class="token number">4.</span><span class="token literal-property property">证书存放位置</span><span class="token operator">:</span><span class="token string">"E:\Android_certificate\lan.keystore"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github个人博客搭建与内容更新</title>
      <link href="/2024/04/02/Hexo+github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0/"/>
      <url>/2024/04/02/Hexo+github%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%86%85%E5%AE%B9%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/">hexo官方文档</a></p></blockquote><h2 id="1-安装">1.安装</h2><blockquote><p>安装前提：</p><ul><li><a href="https://nodejs.org/en">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="https://git-scm.com/">git</a></li></ul><p>如果电脑已安装上述必备程序，可以直接前往安装hexo步骤。</p><p>如果您的电脑中尚未安装所需的程序，请先完成安装。</p></blockquote><p>(1) 安装之前，先在 <a href="https://github.com/">GitHub</a> 上建立一个仓库，如下图。</p><blockquote><p>Tips：githun仓库权限必须设置为公开。</p></blockquote><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403114248941.png" alt="image-20240403114248941" style="zoom: 50%;" /><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403114356475.png" alt="image-20240403114356475"></p><p>(2) 接下来就是安装Hexo</p><p>首先在本地建立一个文件夹 blogs，点开 blog 文件夹，鼠标右键打开 【Git Bush Here】，输入npm命令安装Hexo：</p><pre class="line-numbers language-none"><code class="language-none">npm install -g hexo-clihexo version    # hexo版本号，查看是否安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-建站">2.建站</h2><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件，指定的文件夹一定是空文件夹，否则会报错。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行完成命令后，在文件夹内生成的目录如下。（具体说明查看<a href="https://hexo.io/zh-cn/docs/setup">官方文档</a>.）</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置">3.配置</h2><p>博客的网站标题、网站副标题、名字、网站使用的语言以及网站时区都可以在 <strong>_config.yml</strong> 进行配置。查看<a href="https://hexo.io/zh-cn/docs/configuration">官方文档</a>，了解具体说明。</p><pre class="line-numbers language-none"><code class="language-none">title: Debug Worldsubtitle: 世界很大，我想盘它description: keywords: author: language: zh-CNtimezone: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-生成">4.生成</h2><pre class="line-numbers language-none"><code class="language-none">hexo generate    # 把源文件生成静态文件。等同 hexo ghexo server      # 启动本地服务器。等同 hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用浏览器打开 <a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A4000%2F">http://localhost:4000/</a> 出现Hexo默认博文，就说明成功了。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/6064385-f805f7bbc758d2b8.png" alt="img"></p><h2 id="5-部署">5.部署</h2><p>(1)打开 <strong>_config_yml</strong> 文件夹，下滑底部找到 deploy，进行修改</p><pre class="line-numbers language-none"><code class="language-none">deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;lixiaoyan999&#x2F;lixiaoyan999.github.io.git#git仓库地址 branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403144947368.png" alt="image-20240403144947368" style="zoom:50%;" /><p>(2)安装Git部署插件，命令</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(3)把静态网页推送到github</p><pre class="line-numbers language-none"><code class="language-none">hexo clean   #清除缓存文件 db.json 和已生成的静态文件 publichexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)hexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(4)完成之后，打开浏览器，输入 <a href="http://xxx.github.io">http://xxx.github.io</a> 就可以打开你的网页。</p><h2 id="6-更改主题">6.更改主题</h2><p>这里使用的是 <a href="https://docs.paul.ren/hingle/">Hingle 主题</a>。</p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403151245418.png" alt="image-20240403151245418" style="zoom: 50%;" /><p>(1)打开blogs文件夹,输入代码后自动下载主题至blogs/themes中。</p><pre class="line-numbers language-none"><code class="language-none">git bash:git clone https:&#x2F;&#x2F;github.com&#x2F;Dreamer-Paul&#x2F;Hingle.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403152028677.png" alt="image-20240403152028677" style="zoom: 80%;" /><p>(2)配置站点文件(themes/hingle/_config.yml)，修改主题（注意冒号之后都要有空格）。</p><pre class="line-numbers language-none"><code class="language-none">author: &#39;Paul&#39; # 作者名称author_avatar: &#39;https:&#x2F;&#x2F;sdn.geekzu.org&#x2F;avatar&#x2F;d22eb460ecab37fcd7205e6a3c55c228?s&#x3D;200&amp;r&#x3D;X&amp;d&#x3D;&#39; # 作者头像author_text: &#39;特立独行的一只前端菜狗。本站未注明转载的文章均为原创，并采用 &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;deed.zh&quot; target&#x3D;&quot;_blank&quot; rel&#x3D;&quot;nofollow&quot;&gt;CC BY-NC-SA 4.0&lt;&#x2F;a&gt; 授权协议，&lt;span style&#x3D;&quot;color: #E91E63&quot;&gt;转载请注明来源&lt;&#x2F;span&gt;，谢谢！如本站内容对你有所帮助的话，不妨 &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;paul.ren&#x2F;donate&quot;&gt;捐助支持&lt;&#x2F;a&gt; 一下？同时欢迎订阅关注 &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;paul.ren&#x2F;note&quot; target&#x3D;&quot;_blank&quot;&gt;我的日记&lt;&#x2F;a&gt;，唠嗑（分享）每日的折腾经历。&#39; # 作者信息social: # 社交链接  - title: &#39;微博&#39;    icon: &#39;weibo&#39;    link: &#39;http:&#x2F;&#x2F;weibo.com&#x2F;234891753&#39;  - title: &#39;Github&#39;    icon: &#39;github&#39;    link: &#39;https:&#x2F;&#x2F;github.com&#x2F;Dreamer-Paul&#39;  - title: &#39;首页&#39;    icon: &#39;home&#39;    link: &#39;https:&#x2F;&#x2F;paul.ren&#39;background: &#39;https:&#x2F;&#x2F;api.paugram.com&#x2F;wallpaper?source&#x3D;gh&#39; # 主题背景menu: # 页眉菜单项目  &#39;关于我&#39;: &#x2F;about  &#39;朋友们&#39;: &#x2F;friendsconfig:  copyright: true # 复制的时候弹出保留原站链接说明  night: true # 自动切换夜间模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 启用主题。打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>hingle</code>(先确认主题文件夹名称是否为hingle)。</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.ymltheme: hingle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="7-内容更新与维护">7.内容更新与维护</h2><p>通过 <a href="https://typora.ymzhxing.cn/index.html">typora</a>撰写编辑文档来进行内容的更新，通过git进行远程的拉取和维护。</p><h3 id="7-1新建博文">7.1新建博文</h3><p>(1)执行命令创建新文章或新的页面。新建完成后source/_posts目录中会生成一个文件 “<a href="http://title.md">title.md</a>”，即新建的博文。</p><pre class="line-numbers language-none"><code class="language-none">hexo new &quot;title&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)直接进入source/_posts，鼠标右键选择新建文件，重命名博文。</p><p><img src="https://gitee.com/lxywzh/blogs-img/raw/master/image-20240403162328272.png" alt="image-20240403162328272"></p><h3 id="7-2更新与发布博文">7.2更新与发布博文</h3><p>执行下面几条命令，将博客部署到 GitHub 上：</p><pre class="line-numbers language-none"><code class="language-none">hexo clean &#x3D;&#x3D;  hexo c   # 清除缓存  hexo generate &#x3D;&#x3D; hexo g  # 生成静态文件hexo deploy &#x3D;&#x3D; hexo d    # 部署到github中，更新网页端的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组合命令</p><pre class="line-numbers language-none"><code class="language-none">hexo d -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>tips:</p><ol><li>已发布的文章发生修改， 本地可直接预览，即 不执行上述3个命令,刷新浏览器即可;</li><li>远程部署必须要执行上述命令</li><li>修改内容一旦预览与修改不一致，则需要clean</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue前端面试题</title>
      <link href="/2018/10/30/vue%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/10/30/vue%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong>1、active-class是哪个组件的属性？嵌套路由怎么定义？</strong><br>答：vue-router模块的router-link组件。</p><p><strong>2、怎么定义vue-router的动态路由？怎么获取传过来的动态参数？</strong><br>答：在router目录下的index.js文件中，对path属性加上/:id。  <a href="http://xn--routerparams-ov8ss11l264ektes46i.id">使用router对象的params.id</a></p><p><strong>3、vue-router有哪几种导航钩子？</strong><br>答：三种，一种是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截。第二种：组件内的钩子；第三种：单独路由独享组件</p><p><strong>4、scss是什么？安装使用的步骤是？有哪几大特性？</strong><br>答：预处理css，把css当前函数编写，定义变量,嵌套。 先装css-loader、node-loader、sass-loader等加载器模块，在webpack-base.config.js配置文件中加多一个拓展:extenstion，再加多一个模块：module里面test、loader</p><p><strong>4.1、scss是什么？在vue.cli中的安装使用步骤是？有哪几大特性？</strong><br>答：css的预编译。</p><p>使用步骤：</p><p>第一步：用npm 下三个loader（sass-loader、css-loader、node-sass）</p><p>第二步：在build目录找到webpack.base.config.js，在那个extends属性中加一个拓展.scss</p><p>第三步：还是在同一个文件，配置一个module属性</p><p>第四步：然后在组件的style标签加上lang属性 ，例如：lang=”scss”</p><p>有哪几大特性:</p><p>1、可以用变量，例如（$变量名称=值）；</p><p>2、可以用混合器，例如（）</p><p>3、可以嵌套</p><p><strong>5、mint-ui是什么？怎么使用？说出至少三个组件使用方法？</strong></p><p>答：基于vue的前端组件库。npm安装，然后import样式和js，vue.use（mintUi）全局引入。在单个组件局部引入：import {Toast} from ‘mint-ui’。组件一：Toast(‘登录成功’)；组件二：mint-header；组件三：mint-swiper</p><p><strong>6、v-model是什么？怎么使用？ vue中标签怎么绑定事件？</strong></p><p>答：可以实现双向绑定，指令（v-class、v-for、v-if、v-show、v-on）。vue的model层的data属性。绑定事件：&lt;input @click=doLog() /&gt;</p><p><strong>7、axios是什么？怎么使用？描述使用它实现登录功能的流程？</strong></p><p>答：请求后台资源的模块。npm install axios -S装好，然后发送的是跨域，需在配置文件中config/index.js进行设置。后台如果是Tp5则定义一个资源路由。js中使用import进来，然后.get或.post。返回在.then函数中如果成功，失败则是在.catch函数中</p><p></p><p><strong>8、axios+tp5进阶中，调用axios.post(‘api/user’)是进行的什么操作？axios.put(‘api/user/8′)呢？</strong></p><p>答：跨域，添加用户操作，更新操作。</p><p><strong>9、什么是RESTful API？怎么使用?</strong></p><p>答：是一个api的标准，无状态请求。请求的路由地址是固定的，如果是tp5则先路由配置中把资源路由配置好。标准有：.post .put .delete</p><p><strong>10、vuex是什么？怎么使用？哪种功能场景使用它？</strong></p><p>答：vue框架中状态管理。在main.js引入store，注入。新建了一个目录store，…… export 。场景有：单页应用中，组件之间的状态。音乐播放、登录状态、加入购物车</p><p><strong>11、mvvm框架是什么？它和其它框架（jquery）的区别是什么？哪些场景适合？</strong></p><p>答：一个model+view+viewModel框架，数据模型model，viewModel连接两个</p><p>区别：vue数据驱动，通过数据来显示视图层而不是节点操作。</p><p>场景：数据操作比较多的场景，更加便捷</p><p><strong>12、自定义指令（v-check、v-focus）的方法有哪些？它有哪些钩子函数？还有哪些钩子函数参数？</strong></p><p>答：全局定义指令：在vue对象的directive方法里面有两个参数，一个是指令名称，另外一个是函数。组件内定义指令：directives</p><p>钩子函数：bind（绑定事件触发）、inserted(节点插入的时候触发)、update（组件内相关更新）</p><p>钩子函数参数：el、binding</p><p><strong>13、说出至少4种vue当中的指令和它的用法？</strong></p><p>答：v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定</p><p><strong>14、vue-router是什么？它有哪些组件？</strong></p><p>答：vue用来写路由一个插件。router-link、router-view</p><p><strong>15、导航钩子有哪些？它们有哪些参数？</strong></p><p>答：导航钩子有：a/全局钩子和组件内独享的钩子。b/beforeRouteEnter、afterEnter、beforeRouterUpdate、beforeRouteLeave</p><p>参数：有to（去的那个路由）、from（离开的路由）、next（一定要用这个函数才能去到下一个路由，如果不用就拦截）最常用就这几种</p><p><strong>16、Vue的双向数据绑定原理是什么？</strong></p><p>答：vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><p><strong>具体步骤：</strong></p><p><strong>第一步：需要observe的数据对象进行递归遍历</strong>，包括子属性对象的属性，都加上 <code>setter</code>和<code>getter</code><br>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化</p><p><strong>第二步：compile解析模板指令</strong>，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p><p><strong>第三步：Watcher订阅者是Observer和Compile之间通信的桥梁</strong>，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</p><p><strong>第四步：MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者</strong>，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p><p>ps：16题答案同样适合”<strong>vue data是怎么实现的？”<strong>此面试题</strong>。</strong></p><p><strong>17、请详细说下你对vue生命周期的理解？</strong></p><p>答：总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。</p><p><strong>创建前/后：</strong> 在beforeCreated阶段，vue实例的挂载元素$el和数据对象data都为undefined，还未初始化。在created阶段，vue实例的数据对象data有了，$el还没有。</p><p>**载入前/后：**在beforeMount阶段，vue实例的$el和data都初始化了，但还是挂载之前为虚拟的dom节点，data.message还未替换。在mounted阶段，vue实例挂载完成，data.message成功渲染。</p><p>**更新前/后：**当data变化时，会触发beforeUpdate和updated方法。</p><p>**销毁前/后：**在执行destroy方法后，对data的改变不会再触发周期函数，说明此时vue实例已经解除了事件监听以及和dom的绑定，但是dom结构依然存在</p><p><strong>18、请说下封装 vue 组件的过程？</strong></p><p>答：首先，组件可以提升整个项目的开发效率。能够把页面抽象成多个相对独立的模块，解决了我们传统项目开发：<strong>效率低</strong>、<strong>难维护</strong>、<strong>复用性</strong>等问题。</p><p>然后，使用Vue.extend方法创建一个组件，然后使用Vue.component方法注册组件。子组件需要数据，可以在props中接受定义。而子组件修改好数据后，想把数据传递给父组件。可以采用emit方法。</p><p><strong>19、你是怎么认识vuex的？</strong></p><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。</p><p>答：vuex可以理解为一种开发模式或框架。比如PHP有thinkphp，java有spring等。<br>通过状态（数据源）集中管理驱动组件的变化（好比spring的IOC容器对bean进行集中管理）。</p><p>应用级的状态集中放在store中； 改变状态的方式是提交mutations，这是个同步的事物； 异步逻辑应该封装在action中。</p><p><strong>20、vue-loader是什么？使用它的用途有哪些？</strong></p><p>答：解析.vue文件的一个加载器，跟template/js/style转换成js模块。</p><p>用途：js可以写es6、style样式可以scss或less、template可以加jade等</p><p><strong>21、请说出vue.cli项目中src目录每个文件夹和文件的用法？</strong></p><p>答：assets文件夹是放静态资源；components是放组件；router是定义路由相关的配置;view视图；app.vue是一个应用主组件；main.js是入口文件</p><p><strong>22、vue.cli中怎样使用自定义的组件？有遇到过哪些问题吗？</strong></p><p>答：第一步：在components目录新建你的组件文件（smithButton.vue），script一定要export default {</p><p>第二步：在需要用的页面（组件）中导入：import smithButton from ‘…/components/smithButton.vue’</p><p>第三步：注入到vue的子组件的components属性上面,components:{smithButton}</p><p>第四步：在template视图view中使用，<smith-button>  </smith-button></p><p>第四步：在template视图view中使用，<smith-button>  </smith-button><br>问题有：smithButton命名，使用的时候则smith-button。</p><p><strong>23、聊聊你对Vue.js的template编译的理解？</strong></p><p>答：简而言之，就是先转化成AST树，再得到的render函数返回VNode（Vue的虚拟DOM节点）</p><p>详情步骤：</p><p>首先，通过compile编译器把template编译成AST语法树（abstract syntax tree 即 源代码的抽象语法结构的树状表现形式），compile是createCompiler的返回值，createCompiler是用以创建编译器的。另外compile还负责合并option。</p><p>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p><p>然后，AST会经过generate（将AST语法树转化成render funtion字符串的过程）得到render函数，render的返回值是VNode，VNode是Vue的虚拟DOM节点，里面有（标签名、子节点、文本等等）</p><p><strong>挑战一下：</strong></p><p><strong>1、vue响应式原理？</strong></p><p><strong>2、vue-router实现原理？</strong></p><p><strong>3、为什么要选vue？与其它框架对比的优势和劣势？</strong></p><p><strong>4、vue如何实现父子组件通信，以及非父子组件通信？</strong></p><p><strong>5、vuejs与angularjs以及react的区别？</strong></p><p><strong>6、vuex是用来做什么的？7、vue源码结构</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序入门笔记</title>
      <link href="/2018/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service">小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service).</h4><h2 id="配置">配置</h2><p>1.创建之后自动生成4种文件：①json配置文件。</p><p>​    ②js：逻辑层文件</p><p>​    ③wxml。相当于html文件</p><p>​     ④wxss，相当于css样式<br>2.全局配置:app.json</p><p>page(查看页面路径)、window(设置状态栏、导航栏、标题、窗口背景色）、tabBar(切换页面)、Debug(在控制台页面显示调试信息)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">eg</span><span class="token operator">:</span><span class="token string">"tabBar"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span><span class="token comment">//tab 上的文字默认颜色</span>    <span class="token string-property property">"selectedColor"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token comment">//tab 上的文字选中时的颜色</span>    <span class="token string-property property">"backgroundColor"</span><span class="token operator">:</span><span class="token string">"#fff"</span><span class="token punctuation">,</span><span class="token comment">//tab 的背景色</span>    <span class="token string-property property">"list"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"pagePath"</span><span class="token operator">:</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>      <span class="token comment">//页面路径，必须在 pages 中先定义</span>  <span class="token string-property property">"text"</span><span class="token operator">:</span><span class="token string">"首页"</span><span class="token punctuation">,</span>   <span class="token comment">//tab 上按钮文字</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span><span class="token string">"images/f1.png"</span><span class="token punctuation">,</span>   <span class="token comment">//图片路径</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span><span class="token string">"images/f1_on.png"</span> <span class="token comment">//选中时的图片路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/statistic/statisitic"</span><span class="token punctuation">,</span>      <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"练习1"</span><span class="token punctuation">,</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span><span class="token string">"images/f3.png"</span><span class="token punctuation">,</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span><span class="token string">"images/f3_on.png"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/test/test"</span><span class="token punctuation">,</span>      <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"练习2"</span><span class="token punctuation">,</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"images/loves.png"</span><span class="token punctuation">,</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"images/lover.png"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.页面配置：json文件夹中配置会覆盖app.json中window相同的配置项</p><hr><h2 id="逻辑">逻辑</h2><p>1.APP()函数----注册下程序，接受一个Object参数，指定小程序的生命周回调等，必须在app.js中调用切只能调用一次。</p><p>Object参数：</p><p>onLauch():生命周期回调–监听小程序初始化（全局只能触发一次）</p><p>onShow:监听小程序显示，小程序启动时触发或后台进入前台显示时触发</p><p>onHide():监听小程序隐藏，小程序从前台进入时触发</p><p>onEroor:错误监听函数,页面发生脚本错误时触发</p><p>onPageNotFound:页面不存在监听函数  ，打开页面不存在时触发</p><p>2.getApp(Object)：全局的 <code>getApp()</code> 函数可以用来获取到小程序 <code>App</code> 实例。</p><p>实例：var appInstance = getApp(){</p><p>​console.log(appInstance.globaIData);</p><p>}</p><p>3.路由：在小程序中所有页面的路由全部由诳街进行管理。</p><p>路由的方式有两种：1.调用API       2.使用组件</p><p>4.文件作用域：在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p><p>5.模块化：可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <code>module.exports</code> 或者 <code>exports</code> 才能对外暴露接口。</p><hr><h2 id="视图层">视图层</h2><h4 id="1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用">1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用</h4><p>①数据绑定：  、 id=“item-”</p><p>②列表渲染wx:for</p><p>eg:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  for遍历九九乘法表  --></span><span class="token comment">&lt;!--    1*1=1  2*1=2 22=4 2*3=6  3*1=3 32=6 3*3=9 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>20%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;j &lt;= i&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         &#123;&#123;i&#125;&#125;&#123;&#123;j&#125;&#125;=&#123;&#123;ij&#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串</strong></p><p>③条件渲染:wx:if</p><p>eg:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wxml:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id==1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id > 4&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大于4的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id > 7&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大于7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>js:data: &#123;      id:8,   &#125;----------------------------------------------------<span class="token comment">&lt;!--  hidden在view中不生效，text有效  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>----------------------------------------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>这里的block标签名可以随便起<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>相当于一个控制属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意： block并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</strong></p><p>④模板:template</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wxml: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>第一个对象：&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>第二个对象：&#123;&#123;b&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>&#123;&#123;temname&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 使用模板 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;a:1, b:2,temname:name&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;...obj,temname:name&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span> js:   data: &#123;      obj:&#123;        a: 1,        b: 3        &#125;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤事件:绑定事件: bindtap  |  停止事件冒泡：catchtap</p><p>​    事件中的事件对象：target：事件触发的源头   currentTarget:事件绑定的源头    dateset:事件源组件上由data-开头的自定义属性组成的集合</p><p><strong>更多事件可以查看文档，这里就不一一进行说明了</strong></p><p>⑥引用:</p><p>import:只会引用目标文件夹中的template</p><p>inclde:只会引用除template外的代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;name:'一颗小白菜'&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>item.whtml:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>我是item.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>我是item.wxml中的&#123;&#123;name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-wxss-模块、变量、运算符、语句、数据类型、基础类库">2.wxss: 模块、变量、运算符、语句、数据类型、基础类库</h4><h6 id="尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。">尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =      750物理像素，1rpx = 0.5px = 1物理像素。</h6><p>样式导入：@import       <strong>必须放在css文件最顶部</strong></p><p>内联样式：<view style="color:;" /></p><p>选择器：.class、#id、element、element, element、::after、::before</p><p>全局样式与局部样式：定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><hr><h2 id="组件">组件</h2><h4 id="1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view">1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view</h4><h4 id="2-导航：navigator">2.导航：navigator</h4><h4 id="3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制">3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)</h4><h4 id="4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内">4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)</h4><h4 id="5-地图：map-画布-canvas">5.地图：map     画布:canvas</h4><h4 id="小程序的框架系统分为两部分：视图层（View）和逻辑层-App-Service-2">小程序的框架系统分为两部分：视图层（View）和逻辑层(App Service).</h4><h2 id="配置-2">配置</h2><p>1.创建之后自动生成4种文件：①json配置文件。</p><p>​    ②js：逻辑层文件</p><p>​    ③wxml。相当于html文件</p><p>​     ④wxss，相当于css样式<br>2.全局配置:app.json</p><p>page(查看页面路径)、window(设置状态栏、导航栏、标题、窗口背景色）、tabBar(切换页面)、Debug(在控制台页面显示调试信息)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">eg</span><span class="token operator">:</span><span class="token string">"tabBar"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"color"</span><span class="token operator">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span><span class="token comment">//tab 上的文字默认颜色</span>    <span class="token string-property property">"selectedColor"</span><span class="token operator">:</span><span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token comment">//tab 上的文字选中时的颜色</span>    <span class="token string-property property">"backgroundColor"</span><span class="token operator">:</span><span class="token string">"#fff"</span><span class="token punctuation">,</span><span class="token comment">//tab 的背景色</span>    <span class="token string-property property">"list"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"pagePath"</span><span class="token operator">:</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>      <span class="token comment">//页面路径，必须在 pages 中先定义</span>  <span class="token string-property property">"text"</span><span class="token operator">:</span><span class="token string">"首页"</span><span class="token punctuation">,</span>   <span class="token comment">//tab 上按钮文字</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span><span class="token string">"images/f1.png"</span><span class="token punctuation">,</span>   <span class="token comment">//图片路径</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span><span class="token string">"images/f1_on.png"</span> <span class="token comment">//选中时的图片路径</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/statistic/statisitic"</span><span class="token punctuation">,</span>      <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"练习1"</span><span class="token punctuation">,</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span><span class="token string">"images/f3.png"</span><span class="token punctuation">,</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span><span class="token string">"images/f3_on.png"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>      <span class="token string-property property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/test/test"</span><span class="token punctuation">,</span>      <span class="token string-property property">"text"</span><span class="token operator">:</span> <span class="token string">"练习2"</span><span class="token punctuation">,</span>      <span class="token string-property property">"iconPath"</span><span class="token operator">:</span> <span class="token string">"images/loves.png"</span><span class="token punctuation">,</span>      <span class="token string-property property">"selectedIconPath"</span><span class="token operator">:</span> <span class="token string">"images/lover.png"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.页面配置：json文件夹中配置会覆盖app.json中window相同的配置项</p><hr><h2 id="逻辑-2">逻辑</h2><p>1.APP()函数----注册下程序，接受一个Object参数，指定小程序的生命周回调等，必须在app.js中调用切只能调用一次。</p><p>Object参数：</p><p>onLauch():生命周期回调–监听小程序初始化（全局只能触发一次）</p><p>onShow:监听小程序显示，小程序启动时触发或后台进入前台显示时触发</p><p>onHide():监听小程序隐藏，小程序从前台进入时触发</p><p>onEroor:错误监听函数,页面发生脚本错误时触发</p><p>onPageNotFound:页面不存在监听函数  ，打开页面不存在时触发</p><p>2.getApp(Object)：全局的 <code>getApp()</code> 函数可以用来获取到小程序 <code>App</code> 实例。</p><p>实例：var appInstance = getApp(){</p><p>​console.log(appInstance.globaIData);</p><p>}</p><p>3.路由：在小程序中所有页面的路由全部由诳街进行管理。</p><p>路由的方式有两种：1.调用API       2.使用组件</p><p>4.文件作用域：在 JavaScript 文件中声明的变量和函数只在该文件中有效；不同的文件中可以声明相同名字的变量和函数，不会互相影响。</p><p>5.模块化：可以将一些公共的代码抽离成为一个单独的 js 文件，作为一个模块。模块只有通过 <code>module.exports</code> 或者 <code>exports</code> 才能对外暴露接口。</p><hr><h2 id="视图层-2">视图层</h2><h4 id="1-wxml-数据绑定、列表渲染、条件渲染、模板、事件、引用-2">1.wxml:数据绑定、列表渲染、条件渲染、模板、事件、引用</h4><p>①数据绑定：  、 id=“item-”</p><p>②列表渲染wx:for</p><p>eg:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  for遍历九九乘法表  --></span><span class="token comment">&lt;!--    1*1=1  2*1=2 22=4 2*3=6  3*1=3 32=6 3*3=9 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;[1,2,3,4,5,6,7,8,9]&#125;&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>20%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;j &lt;= i&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         &#123;&#123;i&#125;&#125;&#123;&#123;j&#125;&#125;=&#123;&#123;ij&#125;&#125;      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意： 花括号和引号之间如果有空格，将最终被解析成为字符串</strong></p><p>③条件渲染:wx:if</p><p>eg:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wxml:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id==1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id > 4&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大于4的条件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;id > 7&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>大于7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>js:data: &#123;      id:8,   &#125;----------------------------------------------------<span class="token comment">&lt;!--  hidden在view中不生效，text有效  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">hidden</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是一段文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>----------------------------------------------------<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;true&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>这里的block标签名可以随便起<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>相当于一个控制属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意： block并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</strong></p><p>④模板:template</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">wxml: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>第一个对象：&#123;&#123;a&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>第二个对象：&#123;&#123;b&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>&#123;&#123;temname&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 使用模板 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;a:1, b:2,temname:name&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>obj<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;...obj,temname:name&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span> js:   data: &#123;      obj:&#123;        a: 1,        b: 3        &#125;      &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑤事件:绑定事件: bindtap  |  停止事件冒泡：catchtap</p><p>​    事件中的事件对象：target：事件触发的源头   currentTarget:事件绑定的源头    dateset:事件源组件上由data-开头的自定义属性组成的集合</p><p><strong>更多事件可以查看文档，这里就不一一进行说明了</strong></p><p>⑥引用:</p><p>import:只会引用目标文件夹中的template</p><p>inclde:只会引用除template外的代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">eg:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;name:'一颗小白菜'&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>item.whtml:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>我是item.wxml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>我是item.wxml中的&#123;&#123;name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-wxss-模块、变量、运算符、语句、数据类型、基础类库-2">2.wxss: 模块、变量、运算符、语句、数据类型、基础类库</h4><h6 id="尺寸单位：rpx-eg-在-iPhone6-上，屏幕宽度为375px，共有750个物理像素，则750rpx-375px-750物理像素，1rpx-0-5px-1物理像素。-2">尺寸单位：rpx   eg:在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px =      750物理像素，1rpx = 0.5px = 1物理像素。</h6><p>样式导入：@import       <strong>必须放在css文件最顶部</strong></p><p>内联样式：<view style="color:;" /></p><p>选择器：.class、#id、element、element, element、::after、::before</p><p>全局样式与局部样式：定义在 app.wxss 中的样式为全局样式，作用于每一个页面。在 page 的 wxss 文件中定义的样式为局部样式，只作用在对应的页面，并会覆盖 app.wxss 中相同的选择器。</p><hr><h2 id="组件-2">组件</h2><h4 id="1-视图容器：view、scroll-view-可滚动视图区域-、swiper-滑块视图容器-、movable-area-可移动区域-、cover-view-2">1.视图容器：view、scroll-view(可滚动视图区域)、swiper(滑块视图容器)、movable-area(可移动区域)、cover-view</h4><h4 id="2-导航：navigator-2">2.导航：navigator</h4><h4 id="3-媒体组件：audio、video、image、camera、live-player-实时音视频播放-、live-pusher-实时音频录制-2">3.媒体组件：audio、video、image、camera、live-player(实时音视频播放)、live-pusher(实时音频录制)</h4><h4 id="4-开放能力：open-data-用于展示微信开放的数据-、web-view-用来承载网页的容器，会自动铺满整个小程序页面-、ad-广告-、official-account-用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内-2">4.开放能力：open-data(用于展示微信开放的数据)、web-view(用来承载网页的容器，会自动铺满整个小程序页面)、ad(广告)、official-account(用户扫码打开小程序时，开发者可在小程序内配置公众号关注组件，方便用户快捷关注公众号，可嵌套在原生组件内)</h4><h4 id="5-地图：map-画布-canvas-2">5.地图：map     画布:canvas</h4>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试问题总结</title>
      <link href="/2018/10/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2018/10/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="目录">目录</h2><ul><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/HTML.md">HTML</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/CSS.md">CSS</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/JavaScript.md">JavaScript</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/jQuery.md">jQuery</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Ajax.md">Ajax</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/HTTP.md">HTTP</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Front-end-frame-relative.md">Front-end-frame-relative</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Json-XML.md">Json-XML</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/localStorage.md">localStorage</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/mobile-terminal.md">mobile-terminal</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Modules.md">Modules</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/performance-optimization.md">performance-optimization</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/PS.md">PS</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/SEO.md">SEO</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/ES6.md">ES6</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/cross-domain.md">cross-domain</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/cookie.md">cookie</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/MVC.md">MVC</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Git.md">Git</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/data-structure.md">data-structure</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/dataBase.md">dataBase</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Handwritten-code.md">Handwritten-code</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/computer-basic-knowledge.md">computer-basic-knowledge</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/other.md">other</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/comprehensive.md">comprehensive</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/vue.md">vue</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/react.md">react</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/MVVM.md">MVVM</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/%E6%B5%8F%E8%A7%88%E5%99%A8.md">浏览器</a></li><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/%E6%80%A7%E8%83%BD.md">性能</a></li></ul><h2 id="综合版本"><a href="https://github.com/flymejie/FE-Interview-Questions#%E7%BB%BC%E5%90%88%E7%89%88%E6%9C%AC"></a>综合版本</h2><ul><li><a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-version%5D.md">Interview-Questions</a></li><li>[Front-end-Developer-Questions<a href="https://github.com/flymejie/FE-Interview-Questions/blob/master/Interview-Questions/Front-end-Developer-Questions%5Bquestion-and-answer-version%5D.md">question-and-answer-versio]</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack笔记</title>
      <link href="/2018/03/20/webpack%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/20/webpack%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么使用webpack">为什么使用webpack</h2><p>随着互联网的日益发展现在的网页越来越像是一个功能丰富的应用，其中包含了大量的js代码和各种各样相互依赖的包。为了能够简化开发的复杂度，前端社区里涌现出很多的实践方法。</p><ul><li>模块化，将复杂的程序细化成为小的文件</li><li>类似于TypeScript这种在js基础上扩展出来的语言：使我们能够实现目前版本的JavaScript不能直接使用的特性，并且之后还能转换为JavaScript文件使浏览器可以识别；</li><li>sass less 等css的预编译器</li><li>模块化的概念请参考<a href="https://www.webpackjs.com/concepts/modules/">webpack module</a><br>这些额外的改进确实大大的提高了我们的开发效率，但是利用他们开发的文件往往需要额外的配置才能被浏览器所能够识别，而手动处理有十分的繁琐，于是就出现了类似于webpack之类的工具。</li></ul><h2 id="什么是webpack">什么是webpack</h2><p>webpack可以看做是一个<strong>模块打包机</strong>，它做的事情是：分析你项目结构，找到javascript模块和其他浏览器不能够识别的语言(scss less),并将其转换和打包为合适的格式供浏览器使用。</p><h2 id="webpack的工作模式">webpack的工作模式</h2><p>webpack的工作方式是：把你的项目当做是一个整体，通过一个给定的主文件(index.js)，从这个文件开始找到你项目的所有依赖文件，使用loaders处理他们，最后打包为一个或者多个浏览器能够识别的文件。webpack想比较于其他的前端自动化处理工具速度更快处理的文件类型更多。<br><img src="./webpack.png" alt="webpack"></p><h2 id="核心概念-4">核心概念(4)</h2><ul><li>入口(entry)</li><li>出口(output)</li><li>loader</li><li>插件(plugins)</li></ul><h3 id="入口">入口</h3><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。</p><h3 id="出口">出口</h3><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件。你可以通过在配置中指定一个 output 字段，来配置这些处理过程</p><h3 id="loader">loader</h3><p>loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</p><p>在更高层面，在 webpack 的配置中 loader 有两个目标：</p><ol><li>test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</li><li>use 属性，表示进行转换时，应该使用哪个 loader。</li></ol><h3 id="插件">插件</h3><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。<br>想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。</p><h2 id="开始使用webpack">开始使用webpack</h2><h3 id="安装webpack">安装webpack</h3><ol><li>新建一个空的文件夹(uek)，在改文件夹中建立package.json文件。这是一个标准的npm说明文件，里面包含着大量的信息，包括当前项目的依赖模块，自定义脚本任务等等。在终端中使用<code>npm init</code>命令可以自动创建这个 package.json文件。输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可。</li><li>package.json文件准备就绪，我们在本项目中安装webpack作为依赖包</li></ol><pre class="line-numbers language-none"><code class="language-none">npm install webpack@3.6.0 --save-devnpm install webpack@3.6.0 --save-dev -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>在uek文件夹中，创建app文件夹和public文件夹。app文件夹中放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）。</li></ol><ul><li>index.html --放在public文件夹中;</li><li>Greeter.js-- 放在app文件夹中;</li><li>main.js-- 放在app文件夹中;</li></ul><p>我们在index.html文件中写入最基础的html代码，它在这里目的在于引入打包后的js文件（这里我们先把之后打包后的js文件命名为bundle.js，之后我们还会详细讲述）。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们在Greeter.js中定义一个返回包含问候信息的html元素的函数,并依据CommonJS规范导出这个函数为一个模块：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> greet <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  greet<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">"Hi there and greetings!"</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> greet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js文件中我们写入下述代码，用以把Greeter模块返回的节点插入页面</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Greet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./Greet.js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">Greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="在配置文件中使用webpack">在配置文件中使用webpack</h3><p>Webpack拥有很多其它的比较高级的功能（loaders、plugins），这些功能其实都可以通过命令行模式实现，但这样不太方便且容易出错的，更好的办法是定义一个配置文件，这个配置文件其实也是一个简单的JavaScript模块，我们可以把所有的与打包相关的信息放在里面。<br>继续上面的例子来说明如何写这个配置文件，在当前练习文件夹的根目录下新建一个名为webpack.config.js的文件，我们在其中写入如下所示的简单配置代码，目前的配置主要涉及到的内容是入口文件路径和打包后文件的存放路径。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span>  __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span><span class="token comment">//已多次提及的唯一入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span><span class="token comment">//打包后的文件存放的地方</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token comment">//打包后输出文件的文件名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端输入命令 webpack（全局安装），然后你会在public文件夹下看到打包文件bundle.js。这中方式我们就可以省去烦人的命令行。如果我们连webpack命令都可以不用，会感觉更爽。</p><h3 id="更快捷的执行任务打包">更快捷的执行任务打包</h3><p>在命令输入命令需要代码类似于 <code>webpack</code>（非全局这样的路径其实是比较麻烦的，值得庆幸的是<code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令中使用简单的<code>npm start</code>命令来代替上面繁琐的命令。在<code>package.json</code>中对<code>script</code>对象进行设置即可，设置如下:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"demo2"</span><span class="token punctuation">,</span>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>npm的start命令是一个特殊的脚本名称，其特殊性体现在，在命令中使用<code>npm start</code>就可以执行它对应的命令，如果脚本的命令不是 <code>start</code>，想要在命令中运行时，需要这样用 <code>npm run name </code> 如 <code>npm run dev</code> ，我们在命令中输入 <code>npm start</code>。这样就可以开始打包文件了。</p><h2 id="使用webpack构建本地服务器">使用webpack构建本地服务器</h2><p>想不想让你的浏览器监听到代码的修改，并自动刷新显示修改之后的结果，其实webpack提供了一可选的本地开发服务穷，这个本地服务器是寄语node.js构建的，可以实现你想要的这些功能，不过他是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖。</p><pre class="line-numbers language-none"><code class="language-none">npm install webpack-dev-server --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>devserver配置项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public&quot;目录）</td></tr><tr><td>port</td><td>设置监听端口，如果省略，默认为8080</td></tr><tr><td>inline</td><td>设置为true，当源文件改变时会自动刷新页面</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为<code>true</code>，所有的跳转将指向index.html</td></tr></tbody></table><p>把这些命令添加到 webpack的配置文件中，现在的配置文件 <code>webpack.config.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span>  __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span><span class="token comment">//已多次提及的唯一入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span><span class="token comment">//打包后的文件存放的地方</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token comment">//打包后输出文件的文件名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span><span class="token comment">//本地服务器所加载的页面所在的目录</span>        <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//不跳转</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//实时刷新</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在package.json中的scripts对象中添加如下命令，用来开启本地服务器。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"script"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>   <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>   <span class="token string-property property">"server"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端中输入 <code>npm run server</code>即可在本地 <code>8080</code>端口查看到结果。</p><h2 id="loader-2">loader</h2><p>通过使用不同的loader，webpack有能力调用外部的脚本或者是工具，实现对不同格式文件的处理，比如说分析转换scss为css，或者把下一代的js文件转换为现代浏览器兼容的js文件，对react的开发而言，合适的loader可以把React中的用到的JSX文件转换为JS文件。<br>loader需要单独安装并且需要在<code>webpack.config.js</code>中的<code>modules</code>关键字下进行配置，loaders的配置项包括以下几个方面。</p><ul><li>test： 一个用来匹配loader所处理文件的扩展名的正则表达式(必须)</li><li>loader：loader的名称(必填)</li><li>include/exclude：手动添加必须处理的文件(文件夹)或屏蔽不需要处理的文件(文件夹)（可选）</li><li>query：为loader提供额外的设置选项（可选）</li></ul><p>在配置loader之前，我们把<code>Greeter.js</code>里的问候消息放在一个单独的json文件里，并通过合适的配置是 <code>Greeter.js</code>可以读取改json文件的值，个文件修改代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token string-property property">"greetText"</span><span class="token operator">:</span><span class="token string">"this is greet from json"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更新后的Greeter.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config.json'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> greet <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    greet<span class="token punctuation">.</span>textContent <span class="token operator">=</span> config<span class="token punctuation">.</span>greetText<span class="token punctuation">;</span>    <span class="token keyword">return</span> greet<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Babel的安装与配置">Babel的安装与配置</h2><p>Babel其实是几个模块的包，其核心功能位于称为 babel-core的npm包中，webpack可以把其不同的包整合在一起使用，对于每一个你需要的功能或扩展，你需要安装单独的包（用的做多解析es6的<code>babel-env-preset</code>包和解析<code>JSX</code>的<code>babel-preset-react</code>包）</p><p>我们先来一次性安装这些安装包</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; npm一次性安装多个依赖模块，模块之间用空格隔开npm install --save-dev babel-core babel-loader babel-preset-env babel-preset-react<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在webpack中配置babel的方法如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>                            <span class="token string">"env"</span><span class="token punctuation">,</span> <span class="token string">"react"</span>                        <span class="token punctuation">]</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在webpack的配置已经允许你使用ES6以及JSX的语法了。继续上面的例子进行测试，这是我们使用React，先安装React和React-DOM</p><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们使es6的语法，更新 <code>Greet.js</code> 并返回一个React组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">'./config.json'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">&#123;</span>config<span class="token punctuation">.</span>greetText<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Greeter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<code>main.js</code>如下，使用es6的模块定义和渲染Greeer模块</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Greeter <span class="token keyword">from</span> <span class="token string">'./Greeter'</span><span class="token punctuation">;</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Greeter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新使用<code>npm start</code>打包，如果和之前打开的本地服务器没关，我们可以在<code>localhost:8080</code>下面看到与之前一样的内容。这说明es6和react正常打包了。</p><h2 id="babel的配置">babel的配置</h2><p>babel其实可以完全在 <code>webpack.config.js</code>中进行配置，但是考虑到babel具有非常多的配置项，在单一的 <code>webpack.config.js</code>文件中配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置项放在一个单独的名为<code>.babelrc</code>的配置文件中。我们现在的babel的配置配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分俩个配置文件进行配置(webpack会自动调用1<code>.babelrc</code>里面babel配置选项),如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span><span class="token comment">//已多次提及的唯一入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/public"</span><span class="token punctuation">,</span><span class="token comment">//打包后的文件存放的地方</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token comment">//打包后输出文件的文件名</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span><span class="token comment">//本地服务器所加载的页面所在的目录</span>        <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//不跳转</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//实时刷新</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// .babelrc</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">"presets"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"react"</span><span class="token punctuation">,</span><span class="token string">"env"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到目前为止，我们已经知道了，对于模块，webpack提供了非常强大的处理功能，那那些是模块呢？</p><h2 id="一切皆模块">一切皆模块</h2><p>webpack有一个不可不说的优点，他把所有 的文件都当做模块处理，javascript代码，css和fonts以及图片等等通过核实的loader都可以被处理。</p><h2 id="css">css</h2><p>webpack提供了俩个工具处理样式表，<code>css-loader</code> 和 <code>style-loader</code>, 二者的处理任务不同，<code>css-loader</code>使你能够使用类似 <code>@import 和 url()</code> 的方式实现 <code>require</code>d的功能，<code>style-loader</code>将所有的计算后的样式加入到页面中，二者组合在一起是你能够把样式表嵌入webpack打包后的js文件中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 安装</span>npm intall <span class="token operator">--</span>save<span class="token operator">-</span>dev style<span class="token operator">-</span>loader css<span class="token operator">-</span>loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token comment">// 使用  </span> module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token operator">...</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在app文件夹里创建一个名字为<code>main.css</code>的文件，对一些元素设置样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* main.css */</span><span class="token selector">html</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">-ms-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">-webkit-text-size-adjust</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">*, *:before, *:after</span> <span class="token punctuation">&#123;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">h1, h2, h3, h4, h5, h6, p, ul</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们这里例子中用到的webpack只有单一入口，其他的模块需要通过<code>import,require,url</code>等与入口文件建立起关联，为了让webpack能找到<code>main.css</code>我们把它导入<code>main.css</code>中，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// main.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>render<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Greeter <span class="token keyword">from</span> <span class="token string">'./Greeter'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./main.css'</span><span class="token punctuation">;</span><span class="token comment">//使用require导入css文件</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Greeter <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通常情况下，css会和js打包到同一个文件下，并不会打包为一个单独的css文件，不过通过合适的配置webpack也可以把css打包为单独的文件。</p></blockquote><p>上面的代码说明webpack是怎么把css当做模块看待，接下来继续看一个更加真实的css模块实践。</p><h2 id="css-module">css module</h2><p>在过去的几年里，Javascript通过一些新的语言特性，更好的工具以及更好的实践方法(比如模块化)发展的非常迅速。模块化使得开发者把复杂的代码转化为更小的，干净的，依赖声明明确的单元，配合优化工具，依赖管理和加载管理可以自动完成。</p><p>不过前端的另外部分，css发展就相对慢一些，大多的样式表却依旧巨大且充满了全局类名，维护和修改都非常的困难。</p><p>被称为<code>css module</code>的技术意在把js的模块化思想带入到css中来，通过css模块，所有的类名，动画名默认都之作用于当前模块。只需要在css loader中进行简单配置即可，然后就可以直接把css的类名传递到组件的代码中，这样做有效避免了全局污染。具体代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 指定启用css modules</span>                            <span class="token literal-property property">localIdentName</span><span class="token operator">:</span> <span class="token string">'[name]__[local]--[hash:base64:5]'</span> <span class="token comment">// 指定css的类名格式</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在app文件夹下创建一个<code>Greet.css</code>文件来进行测试</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*Greet.css */</span><span class="token selector">.root</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #eee<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #ccc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入<code>.root</code>到Greet.js中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>Component<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">'./config.json'</span><span class="token punctuation">;</span><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./Greeter.css'</span><span class="token punctuation">;</span><span class="token comment">//导入</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token punctuation">&#123;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">&#123;</span>styles<span class="token punctuation">.</span>root<span class="token punctuation">&#125;</span><span class="token operator">></span> <span class="token comment">//使用cssModule添加类名的方法</span>        <span class="token punctuation">&#123;</span>config<span class="token punctuation">.</span>greetText<span class="token punctuation">&#125;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放心使用，相同的类名也不会造成不同组件在之间的污染。</p><h2 id="css预处理器">css预处理器</h2><p><code>sass</code>和<code>less</code>之类的预处理器是对原生css的拓展，它允许你使用变量嵌套混合等不存在与css中的特性来写css，css预处理器可以将这些特殊类型的语句转化为浏览器可识别的css语句。</p><p>接下来我们在webpack中使用相关的loader进行相关的配置就可以使用了，一下是常用的css处理loaders：</p><ul><li>Less loader</li><li>Sass loader</li><li>Stylus loader</li></ul><p>也存在一个处理css的平台<code>-PostCSS</code>，他可以帮助你的css实现更多的功能，在<br>[官方文档]: (<a href="https://github.com/postcss/postcss">https://github.com/postcss/postcss</a>) 可了解更多知识。</p><p>我们来使用 PostCSS为css代码自动添加适应不同浏览器的css前缀。</p><p>首先安装 <code>postss-loader</code>和<code>autoprefixer</code>（自动添加前缀的插件）<br><code>npm install --save-dev post-loader autoprefixer</code></p><p>接下来，在webpack配置文件中添加 <code>postcss-loader</code>，在根目录新建 <code>postcss.config.js</code>，并添加如下代码之后，重新<code>npm start</code>打包时，你写的css会自动添加不同的前缀。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"postcss-loader"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; postcss.config.jsmodule.exports &#x3D; &#123;    plugins:[        require(&#39;autoprefixer&#39;)    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 处理scss</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片处理">图片处理</h3><ul><li>安装库</li></ul><p><code>npm i --save-dev url-loader file-loader</code></p><ul><li>相应配置</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>            <span class="token comment">// 图片格式正则</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(png|jpe?g|gif|svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>                    <span class="token comment">// 配置 url-loader 的可选项</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 限制 图片大小 10000B，小于限制会将图片转换为 base64格式</span>                      <span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>                    <span class="token comment">// 超出限制，创建的文件格式</span>                    <span class="token comment">// build/images/[图片名].[hash].[图片格式]</span>                      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'images/[name].[hash].[ext]'</span>                   <span class="token punctuation">&#125;</span>                  <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，本文已经谈论了处理js的babel和处理css的PostCSS的基本用法，他们其实也是俩个独立的平台，配合webpack可以很好地发挥他们的作用。接下来介绍webpack中的另一个非常重要的功能——插件。</p><h2 id="插件-plugins">插件(plugins)</h2><p>插件是用来扩展webpack功能的，他们会在整个构建过程中生效，执行相关的任务。<br>loader和plugin常常被弄混，但是他们其实是完全不同的东西，可以这么说，loader是在打包构建工程中用来处理源文件的(less,sass,jsx)，一次处理一个，插件并不直接操作单个文件，他直接对整个构建过程起作用。</p><p>webpack有很多内置插件，同时也有很多第三方插件，可以让我们完成更加丰富的功能。</p><h2 id="使用插件方法">使用插件方法</h2><p>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）继续上面的例子，我们添加了一个给打包后代码添加版权声明的插件。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是webpack插件的基本用法，下面给大家推荐几个常用插件。</p><h2 id="HtmlWebpackPlugin">HtmlWebpackPlugin</h2><p>这个插件的作用是依据一个简单的<code>index.html</code>模板，生成一个自动引用你打包后js文件的新index.html。这在每次生成的js文件名称不同时非常有用。</p><h3 id="安装">安装</h3><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev html-webpack-plugin <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个插件自动完成了我们之前手动做的一些事情，在正式使用之前需要对一直以来的项目结构做一些更改：</p><ol><li>移除public文件夹，利用此插件，<code>index.html</code>文件会自动生成，此外css已经通过前面的操作打包到js中了。</li><li>在app目录下，创建一个<code>index.tmpl.html</code>文件模板，这个模板包含<code>title</code>等必须元素，在编译过程中，插件会依据此模板生成最终的html页面， 会自动添加所依赖的css，js，favicon等文件，<code>index.temp.html</code>中的模板源代码如下：</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>root<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>更新webpack的配置文件，方法同上，新建一个build文件夹用来存放最终的输出文件</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span><span class="token comment">//已多次提及的唯一入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/build"</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span><span class="token comment">//本地服务器所加载的页面所在的目录</span>        <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//不跳转</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//实时刷新</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span>                <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"style-loader"</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>                        <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                            <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"postcss-loader"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/index.tmpl.html"</span><span class="token comment">//new 一个这个插件的实例，并传入相关的参数</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行 <code>npm start</code> ，build文件夹下生成了 <code>bundle.js  index.html</code>。</p><h2 id="产品阶段构建">产品阶段构建</h2><p>目前为止，我们已经使用webpack构建了一个完整的开发环境。但是在产品阶段，可能还需要对打包的文件进行额外的处理，比如说：优化，压缩，缓存以及分离css和js。<br>对于复杂的项目来说，需要复杂的配置，这时候分解配置文件为多个小文件可以使得事情井井有条，以上面的例子来看，我们创建一个 <code>webpack.production.config.js</code>文件，在里面加上基本的配置，他和原始的webpack.config.js很像，如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.production.config.js</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">entry</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/main.js"</span><span class="token punctuation">,</span> <span class="token comment">//已多次提及的唯一入口文件</span>    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">path</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/build"</span><span class="token punctuation">,</span>        <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'null'</span><span class="token punctuation">,</span> <span class="token comment">//注意修改了这里，这能大大压缩我们的打包代码</span>    <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">contentBase</span><span class="token operator">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span> <span class="token comment">//本地服务器所加载的页面所在的目录</span>        <span class="token literal-property property">historyApiFallback</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//不跳转</span>        <span class="token literal-property property">inline</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">hot</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\.jsx|\.js)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"babel-loader"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            <span class="token literal-property property">use</span><span class="token operator">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">fallback</span><span class="token operator">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>                <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>                    <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>                    <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">"postcss-loader"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/index.tmpl.html"</span> <span class="token comment">//new 一个这个插件的实例，并传入相关的参数</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//热加载插件</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// package.json</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>  <span class="token string-property property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string-property property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="token punctuation">,</span>    <span class="token string-property property">"start"</span><span class="token operator">:</span> <span class="token string">"webpack"</span><span class="token punctuation">,</span>    <span class="token string-property property">"server"</span><span class="token operator">:</span> <span class="token string">"webpack-dev-server --open"</span><span class="token punctuation">,</span>    <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production webpack --config ./webpack.production.config.js --progress"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token string-property property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token string-property property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"react"</span><span class="token operator">:</span> <span class="token string">"^15.6.1"</span><span class="token punctuation">,</span>    <span class="token string-property property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"^15.6.1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果是window电脑，build需要配置为 <code>&quot;build&quot;: &quot;set NODE_ENV=production &amp;&amp; webpack --config ./webpack.production.config.js --progress&quot;</code></p></blockquote><h2 id="优化插件">优化插件</h2><p>webpack提供了一些在发布阶段非常有用的一些插件，他们大多来自webpack社区，可以通过npm安装，通过以下插件可以在完成产品发布阶段所需的功能</p><ul><li>OccurenceOrderPlugin :为组件分配ID，通过这个插件webpack可以分析和优先考虑使用最多的模块，并为它们分配最小的ID</li><li>UglifyJsPlugin:压缩js代码</li><li>ExtractTextPlugin:分离css和js文件</li></ul><p>OccurenceOrder 和 UglifyJS plugins 都是内置插件，你需要做的只是安装其它非内置插件</p><pre class="line-numbers language-none"><code class="language-none">npm install --save-dev extract-text-webpack-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置文件的plugins后启用他们</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// package.json</span><span class="token comment">// const ExtractTextPlugin = require('extract-text-webpack-plugin');</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>BannerPlugin</span><span class="token punctuation">(</span><span class="token string">'版权所有，翻版必究'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">template</span><span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">"/app/index.tmpl.html"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">// new webpack.optimize.OccurrenceOrderPlugin(),</span>       <span class="token comment">//new webpack.optimize.UglifyJsPlugin(),</span>       <span class="token comment">// new ExtractTextPlugin("styles.css")</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时执行<code>npm run build</code>可以看见代码是被压缩后的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlueLake博客主题的安装及详细配置</title>
      <link href="/2018/03/10/BlurLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/03/10/BlurLake%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了<a href="https://hexo.io/zh-cn/">Hexo</a>，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><blockquote><p>需要特别注意的是Hexo有两个<code>_config.yml</code>配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为<strong>根_config.yml</strong>；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为<strong>主题_config.yml</strong>。</p></blockquote><h3 id="1-安装">1. 安装</h3><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。</p><p>您可以直接到<a href="https://github.com/chaooo/hexo-theme-BlueLake">BlueLake发布页</a>下载，然后解压拷贝到<code>themes</code>目录下，修改配置即可。<br>不过我还是推荐使用<code>GIT</code>来checkout代码，之后也可以通过<code>git pull</code>来快速更新。</p><h4 id="1-1-安装主题">1.1 安装主题</h4><p>在根目录下打开终端窗口：</p><pre class="line-numbers language-none"><code class="language-none">git bash$ git clone https:&#x2F;&#x2F;github.com&#x2F;chaooo&#x2F;hexo-theme-BlueLake.git themes&#x2F;BlueLake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-2-安装主题渲染器">1.2 安装主题渲染器</h4><p>BlueLake是基于<code>jade</code>和<code>stylus</code>写的，所以需要安装<code>hexo-renderer-jade</code>和<code>hexo-renderer-stylus</code>来渲染。</p><pre class="line-numbers language-none"><code class="language-none">git bash$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-3-启用主题">1.3 启用主题</h4><p>打开<code>根_config.yml</code>配置文件，找到theme字段，将其值改为<code>BlueLake</code>(先确认主题文件夹名称是否为BlueLake)。</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.ymltheme: BlueLake<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-4-验证">1.4 验证</h4><p>首先启动 Hexo 本地站点，并开启调试模式：</p><pre class="line-numbers language-none"><code class="language-none">git bash$ hexo s --debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：<code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h4 id="1-5-更新主题">1.5 更新主题</h4><p>今后若主题添加了新功能正是您需要的，您可以直接<code>git pull</code>来更新主题。</p><pre class="line-numbers language-none"><code class="language-none">git bashcd themes&#x2F;BlueLakegit pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-配置">2. 配置</h3><h4 id="2-1-配置网站头部显示文字">2.1 配置网站头部显示文字</h4><p>打开<code>根_config.yml</code>，找到：</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.ymltitle: subtitle: description: author:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>title</code>和<code>subtitle</code>分别是网站主标题和副标题，会显示在网站头部；<code>description</code>在网站界面不会显示，内容会加入网站源码的<code>meta</code>标签中，主要用于SEO；<code>author</code>就填写网站所有者的名字，会在网站底部的<code>Copyright</code>处有所显示。</p><h4 id="2-2-设置语言">2.2 设置语言</h4><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在<code>根_config.yml</code>配置如下：</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.ymllanguage: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-设置菜单">2.3 设置菜单</h4><p>打开<code>主题_config.yml</code>，找到：</p><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.ymlmenu:  - page: home    directory: .    icon: fa-home  - page: archive    directory: archives&#x2F;    icon: fa-archive  # - page: about  #   directory: about&#x2F;  #   icon: fa-user  - page: rss    directory: atom.xml    icon: fa-rss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。</p><p>主题默认是展示四个菜单，即<code>主页home</code>，<code>归档archive</code>，<code>关于about</code>，<code>订阅RSS</code>；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。<br>每个页面底部的<code>footer</code>中<code>联系博主</code>的三个图标分别是<code>邮箱</code>，<code>微博主页链接地址</code>，<code>GitHUb个人页链接地址</code>，直接使用<code>主题_config.yml</code>中<code>about页面</code>的配置，若不需要about页面，只需要如下配置就好：</p><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.yml# About page about:  email: ## 个人邮箱   weibo_url: ## 微博主页链接地址  github_url: ## github主页链接地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-3-1-添加about页">2.3.1 添加about页</h5><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：</p><pre class="line-numbers language-none"><code class="language-none">git bash$ hexo new page &#39;about&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开<code>主题_config.yml</code>，补全关于我页面的详细信息：</p><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.yml# About page about:  photo_url: ## 头像的链接地址  email: ## 个人邮箱   weibo_url: ## 微博主页链接地址  weibo_name: ## 微博用户名   github_url: ## github主页链接地址  github_name: ## github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然您也可以自定义重新布局about页面，只需要修改<code>layout/page.jade</code>模板就好。</p><h5 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件">2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h5><p>在根目录下打开命令行窗口：</p><pre class="line-numbers language-none"><code class="language-none">git bash$ npm install hexo-generator-feed --save$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>主题_config.yml</code>配置：</p><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.ymlPlugins:  hexo-generator-feed  hexo-generator-sitemap  hexo-generator-baidu-sitemapfeed:  type: atom  path: atom.xml  limit: 20sitemap:  path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-添加本地搜索">2.4 添加本地搜索</h4><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件<a href="https://github.com/alexbruno/hexo-generator-json-content">hexo-generator-json-content</a>来创建JSON数据文件：</p><pre class="line-numbers language-none"><code class="language-none">git bash$ npm install hexo-generator-json-content@2.2.0 --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后在<code>根_config.yml</code>添加配置：</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.ymljsonContent:  meta: false  pages: false  posts:    title: true    date: true    path: true    text: true    raw: false    content: false    slug: false    updated: false    comments: false    link: false    permalink: false    excerpt: false    categories: false    tags: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后在<code>主题_config.yml</code>添加配置：</p><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.ymllocal_search: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5-修改站点图标">2.5 修改站点图标</h4><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico **，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico <strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为</strong> apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。</p><p>站点图标存放在主题的<code>Source</code>目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为** favicon.ico <strong>，请将其放入hexo目录的<code>source</code>文件夹，建议大小：32px X 32px。<br>您需要为苹果设备添加网站徽标，请命名为</strong> apple-touch-icon.png **的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h4 id="2-6-添加站点关键字">2.6 添加站点关键字</h4><p>请在hexo目录的<code>根_config.yml</code>中添加keywords字段，如：</p><pre class="line-numbers language-none"><code class="language-none">根_config.yml_config.yml# Sitetitle: Hexosubtitle: 副标题description: 网站简要描述,如：Charles·Zheng&#39;s blog.keywords: 网站关键字, key, key1, key2, key3author: Charleslanguage: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-其他配置">2.7 其他配置</h4><p><code>主题_config.yml</code>的其他配置</p><ol><li><code>show_category_count</code>——是否显示分类下的文章数。</li><li><code>widgets_on_small_screens</code>——是否在小屏显示侧边栏，若<code>true</code>,则侧边栏挂件将显示在底部。主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml">themes/BlueLake/_config.yml</a><code>show_category_count: true widgets_on_small_screens: true</code></li></ol><h3 id="3-集成第三方服务">3.集成第三方服务</h3><h4 id="3-1-添加评论">3.1 添加评论</h4><p>目前主题集成六种第三方评论，分别是<a href="http://duoshuo.com/">多说评论</a>、<a href="https://disqus.com/">Disqus评论</a>、<a href="https://livere.com/">来必力评论</a>、<a href="http://www.uyan.cc/">友言评论</a>、<a href="https://gentie.163.com/info.html">网易云跟帖评论</a>、<a href="http://changyan.kuaizhan.com/">畅言评论</a>，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前<code>网易云跟帖</code>和<code>畅言</code>还不错。</p><ol><li>注册并获得代码。<ul><li>若使用<a href="http://duoshuo.com/">多说评论</a>，注册多说后获得short_name。</li><li>若使用<a href="https://disqus.com/">Disqus评论</a>，注册Disqus后获得short_name。</li><li>若使用<a href="https://livere.com/">来必力评论</a>，注册来必力,获得data-uid。</li><li>若使用<a href="http://www.uyan.cc/">友言评论</a>，注册友言,获得uid。</li><li>若使用<a href="https://gentie.163.com/info.html">网易云跟帖评论</a>，注册网易云跟帖,获得productKey。</li><li>若使用<a href="http://changyan.kuaizhan.com/">畅言评论</a>，注册畅言，获得appid，appkey。</li></ul></li><li>配置<code>主题_config.yml</code>：主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml">themes/BlueLake/_config.yml</a><code>#Cmmentscomment:  duoshuo: ## duoshuo_shortname  disqus: ## disqus_shortname  livere: ## 来必力(data-uid)  uyan: ## 友言(uid)  cloudTie: ## 网易云跟帖(productKey)  changyan: ## 畅言需在下方配置两个参数，此处不填。    appid: ## 畅言(appid)    appkey: ##畅言(appkey)</code></li></ol><h4 id="3-2-百度统计">3.2 百度统计</h4><ol><li>登录<a href="http://tongji.baidu.com/">百度统计</a>，定位到站点的代码获取页面。</li><li>复制<code>//hm.baidu.com/hm.js?</code>后面那串统计脚本id(假设为：8006843039519956000)</li><li>配置<code>主题_config.yml</code>:主题_config.yml<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/_config.yml">themes/BlueLake/_config.yml</a><code>baidu_analytics: 8006843039519956000</code></li></ol><blockquote><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code></p><p>注意： <code>baidu_analytics</code>不是你的百度<code>id</code>或者百度统计<code>id</code><br>如若使用谷歌统计，配置方法与百度统计类似。</p></blockquote><h4 id="3-3-卜算子阅读次数统计">3.3 卜算子阅读次数统计</h4><pre class="line-numbers language-none"><code class="language-none">主题_config.ymlthemes&#x2F;BlueLake&#x2F;_config.ymlbusuanzi: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>若设置为<code>true</code>将计算文章的阅读量(Hits)，并显示在文章标题下的<code>小手图标</code>旁。</p><h4 id="3-4-微博秀">3.4 微博秀</h4><p>微博秀挂件的代码放在<code>layout/_widget/weibo.jade</code>下，需要您去<a href="http://open.weibo.com/">微博开放平台</a>获取您自己的微博秀代码来替换。</p><ol><li>登录<a href="http://open.weibo.com/">微博开放平台</a>，选择微博秀。</li><li>为了与主题风格统一，作如下配置<ul><li>基础设置：高<code>400px</code>；勾选宽度自适应；颜色选择<code>白色</code>；</li><li>样式设置：主字色<code>#333</code>；链接色<code>#40759b</code>；鼠标悬停色<code>#f7f8f8</code>；</li><li>模块设置：去掉<code>标题</code>、<code>边框</code>、<code>粉丝</code>的勾选框，只留<code>微博</code>。</li></ul></li><li>复制代码里<code>src=&quot;&quot;</code>里引号包裹的内容，替换到<code>layout/_widget/weibo.jade</code>weibo.jade<a href="https://github.com/chaooo/hexo-theme-BlueLake/blob/master/layout/_widget/weibo.jade">layout/_widget/weibo.jade</a><code>.widget  .widget-title    i(class='fa fa-weibo')= ' ' + __('新浪微博')  iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)</code>这只是为了和主题的风格统一，当然您也可以自由随意发挥。注意：最主要是是要把<code>src</code>里<code>uid=</code>和<code>verifier=</code>后面的字段替换为您自己代码里的就好。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记</title>
      <link href="/2017/08/22/HTML%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/08/22/HTML%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>HTML（HyperText Markup Language，超文本标记语言） 是用来定义网页结构的一种描述语言。</p><p>HTML:超文本标记语言</p><p><strong>一．标签按照语法分类：</strong></p><p>1.单标签：开始标签</p><p>&lt;标签名&gt;例如：meta</p><p>2.双标签:开始标签/结束标签构成</p><p>&lt;标签名&gt;&lt;/标签名&gt;</p><p>例如：<head></head></p><p>3.注释标签(Ctrl+ / )：</p><p><!-- --></p><p>1. 表单控件（属于行内块元素）：文本框<input  > &lt;input type = “button” value(值)=搜索按钮&gt;</p><p><strong>二．按照页面中的呈现效果分类：</strong></p><p>1.块元素</p><p>特性：可以设置宽高，独占一行。</p><p>例如：div p(段落) pre等等;h1-h6\</p><p>列表标签：</p><p>无序列表:ul;li        ul下边必须嵌套的是li</p><p>有序列表:ol;li        …</p><p>项目列表：dl\dt;dd    dl→dt→dd</p><p>2.行内元素</p><p>特性：在一行内显示，不可以设置宽高。</p><p>例如：<a href>this is my sister</a></p><p>b(加粗);em着重文字；i倾斜;span</p><p>span标签不可以设置宽高，浮动之后可以设置宽高</p><p>3.行内块元素</p><p>特性：在一行内显示，可以设置宽高。</p><p>例如：img\表单控件（input）</p><p><strong>元素级别</strong>：</p><p>块元素&gt;行内块元素&gt;行内元素</p><p><strong>元素的转换（<strong>display</strong>）</strong></p><p>块元素：block</p><p>行内元素：inline</p><p>行内块元素：inline-block</p><p></p><p><strong>div.btn{$$}\19 点tab键同时复制19句</strong></p><p></p><p><strong>文档流：</strong></p><p>从左到右，从上到下</p><p><strong>一个元素实际的宽高：</strong></p><p>实际的宽度 = border-left+padding-left+width+padding-right+border-right</p><p>实际的高度 = border-top+padding-top+height+padding-dottom+border-bottom</p><p></p><p><strong>元素的嵌套规则：</strong></p><p>相同级别可以相互嵌套。级别高的元素可以嵌套元素级别低的元素</p><p></p><p>属性：</p><p>语法：1.位置在哪里？在开始标签中。</p><p>2.&lt;meta 属性名(如charset)=“属性值”&gt;</p><p>3.&lt;div 属性名=“属性值1 属性值2”&gt;</p><p>例如：<div class="box1 box2"></div></p><p></p><p><strong>路径的两种方式：</strong></p><p>1.绝对路径：从盘符开始的路径；</p><p>2.相对路径：一个文件和另一个文件的关系</p><p>返回上一级： …/</p><p>CSS层叠样式表：</p><p>选择器   和  样式</p><p><strong>一．选择元素</strong></p><p><strong>1.标签选择器:选择页面中所有的标签</strong></p><p>语法：</p><p>标签名{</p><p>样式名：样式值;</p><p>样式名：样式值;</p><p>…</p><p>}</p><p>div{</p><p>width:600px;</p><p>height:600px;</p><p>background-color:red;</p><p>}</p><p><strong>2.类名选择器：选择页面中类名为的全部元素。</strong></p><p>语法：.类名{</p><p>样式名:样式值;</p><p>}</p><p><strong>3.后代选择器：</strong>****</p><p>元素一  元素二{  }</p><p><strong>4.群组选择器：</strong></p><p>元素一,元素二…{ }</p><p><strong>5、通用选择器</strong></p><p>*{</p><p>​Width:100px;</p><p>}</p><p><strong>6、交叉选择器：选择类名一样的其中的一个标签</strong></p><p>tabName.className{}</p><p><strong>7、子类选择器</strong></p><p>E&gt;F{}</p><p>.box &gt;div</p><p><strong>8、兄弟选择器</strong></p><p>E+F  相邻的兄弟元素</p><p><strong>9、伪类选择器（选中元素的一种状态）：</strong></p><p><strong>1、：hover{} 选中元素的鼠标移入状态</strong></p><p><strong>2、:Link{} 默认时的状态</strong></p><p><strong>3、:active{} 跳转点击时的状态</strong></p><p><strong>4、:visited{} 访问过后的状态</strong></p><p><strong>三．伪元素选择器（选择不存在的元素）</strong></p><p><strong>1</strong>**、*****::before{content:” ”;} ****  **在内容之前添加的伪元素（行内元素）</p><p><strong>2</strong>**、*****::after{content:” ”;} ****    <strong>在内容之后添加的伪元素</strong>**</p><p><strong>3</strong>**、*****::first-letter{content:” ”;} ****  **在内容中添加首字母的伪元素</p><p><strong>4</strong>**、*****::first-line{content:” ”;} ****   **在内容中添加行的伪元素</p><p>定义属性时：必须**content:” ”;  **<strong>转换块元素</strong></p><p><strong>四、结构伪类：</strong></p><p><strong>.box{}</strong>****</p><p><strong>1</strong>**、.box p:nth-child(1){}        作为box中里面第一个子元素的P标签</p><p><strong>2</strong>、.box p:nth-last-child(3){}      作为box中里面倒数第三个子元素的P标签</p><p><strong>3</strong>、.box p:nth-first-child{}         作为box中里面第一个子元素的P标签</p><p><strong>4</strong>、.box div:nth-of-type(1){}        作为box中里面同类型的第一个子元素的div标签</p><p><strong>5</strong>、.box div:nth-last-of-type(1){}    作为box中里面同类型的第一个子元素的div标签</p><p><strong>6</strong>、.box div:nth-first-of-type{}      作为box中里面同类型的倒数第一个子元素的div标签</p><p><strong>7</strong>、.box div:nth-child(1){}          作为box中里面第一个子元素的div</p><p><strong>8</strong>、.box div:last-child{}           作为box中里面倒数第一个子元素的div</p><p><strong>9</strong>、.box div:first-child{}            作为box中里面第一个子元素的div</p><p><strong>10</strong>、.box div:empty{}             选中一个没有内容的div（一切元素都没有的时候）</p><p><strong>11</strong>、 html:root{}                选中根元素</p><p><strong>12、</strong> .box div:only-child{}          选中元素的唯一元素（比.box div的优先级别高）</p><p><strong>13</strong>、.box div:only-of-type{}          选中元素的唯一同类型元素</p><p></p><p><strong>样式表的引入方式：</strong></p><p><strong>1.<strong><strong>外链式样式</strong></strong></strong></p><link rel "stylesheet" "href"><p><strong>2.<strong><strong>嵌入式样式表</strong></strong></strong></p><style>.box{width:200px;height:200px;}</style><p><strong>3.<strong><strong>行内样式表</strong></strong></strong></p><div style ="width:200px;height:200px;"></div><p><strong>行内样式优先级最高。嵌入式和外链式的优先级由引入页面中的顺序决定，离元素越近，优先级越高。</strong>****</p><p>** **</p><p>A   B   C   D   E</p><p>1   2   3   3   0</p><p>-----------------------------------------------------------------------------------------------</p><p>A  style</p><p>B  ID 选择器的数量</p><p>C  class类名选择器的数量/  伪类选择器的数量/属性选择器的数量</p><p>D  标签选择器的数量/伪元素选择器的数量</p><p>E  通用选择器</p><p>---------------------------------------------------------------------------------------------------</p><p>ID 选择器的优先级：100（#代表id）</p><p>类名选择器的优先级：10</p><p>标签选择器的优先级：1</p><p><strong>选择器的优先级原则：越具体优先级越高。</strong></p><p></p><p></p><p><strong>五</strong>**.<strong><strong>盒子模式：</strong></strong>**</p><p>content(width,height)</p><p>padding(内填充，内容和边框的距离)</p><p>border(边框)</p><p>margin（外间距 元素和元素之间的距离）</p><p>** **</p><p><strong>margin:0 auto :<strong><strong>让块元素在父元素中水平居中</strong></strong></strong></p><p><strong>text-align:<strong><strong>行内元素水平方向的对齐元素</strong></strong></strong></p><p><strong>line-height:120px;<strong><strong>定义行高</strong></strong></strong></p><p></p><p><strong>margin:50px  100px  <strong><strong>上下</strong></strong>  <strong><strong>左右</strong></strong></strong></p><p><strong>margin:50px 100px 50px <strong><strong>上</strong></strong> <strong><strong>左右</strong></strong> <strong><strong>下</strong></strong></strong></p><p><strong>margin:50px 100px 200px 300px <strong><strong>上右下左</strong></strong></strong></p><p>** **</p><p>** **</p><p><strong>盒子模型中的一些问题：</strong>****</p><p>1. <strong>默认情况下大部分元素的<strong><strong>margin\padding</strong></strong>都为<strong><strong>0</strong></strong>，但是有一些元素的<strong><strong>margin\padding</strong></strong>不为</strong>** 0.<strong><strong>比如说：<strong><strong>h1-h6</strong></strong>标签</strong></strong>\P\body\ul,li\ol,li\dl dt dd******</p><p>2. <strong>相邻的两个块元素的<strong><strong>margin</strong></strong>值会重合。值会取得最大值。</strong>****</p><p>3. <strong>行内元素的<strong><strong>margin</strong></strong>只有左右没有上下。</strong>****</p><p>4. <strong>margin<strong><strong>可以设置为负数，<strong><strong>padding</strong></strong>不可以。</strong></strong></strong></p><p>5. <em><em>当两个元素发生嵌套关系，如果父元素没有上边边框，上<strong><strong>padding</strong></strong>值，父子之间没有其他内容。此时子元素的<strong><strong>margin-top</strong></strong>值回作用到父元素身上。（解决方法一：给父元素加<strong><strong>padding-top</strong></strong>来代替子元素加<strong><strong>margin-top</strong></strong>；解决方法二：给父元素添加****overflow:hidden/*<strong><strong>超出部分：隐藏</strong></strong></em>/<strong><strong>）</strong></strong></em>*</p><p>** **</p><p></p><p>** **</p><p><strong>六．<strong><strong>float</strong></strong>浮动</strong>****</p><p>原理：让元素脱离文档流。</p><p>解决：块元素独占一行。</p><p>浮动的子元素撑不开父元素</p><p>1.给父元素添加   overflow:hidden;</p><p>2clear:left/right/both;在父元素最后添加一个拥有清除浮动属性的子元素.</p><p></p><p>.box::affter{</p><p>Content:””;</p><p>Display:block;</p><p>Clear:both;</p><p>}</p><p></p><p>浮动之后宽度会自动参照内容。</p><p></p><p></p><p></p><p></p><p>字体：font-weight:normal 正常不加粗</p><p>bold加粗</p><p>100-900（单位，加粗程度）</p><p>Padding-left:2em; 当前字体的2倍  em指字数的二倍</p><p></p><p></p><p><strong>所有字体的设置都可以被继承</strong>****</p><p>auto:高度参照内容元素</p><p>宽度参照父元素   子元素的border+padding+margin值不会大于父元素</p><p></p><p><strong>box-sizing:border-box  <strong><strong>容器的宽高变成实际尺寸</strong></strong></strong></p><p><strong>cursor</strong>**：**<strong>pointer;<strong><strong>鼠标样式手型</strong></strong></strong></p><p><strong>List-style:none;  <strong><strong>清除列表样式</strong></strong></strong></p><p><strong>Border-radius:3px   <strong><strong>边框的半径</strong></strong></strong></p><p><strong>Max-height   <strong><strong>最大高度</strong></strong></strong></p><p><strong>Min-height    <strong><strong>最小高度</strong></strong></strong></p><p><strong>Display:none;  <strong><strong>超出部分消失</strong></strong>  //  display:block;   <strong><strong>超出部分出现</strong></strong></strong></p><p><strong>Visibility:hidden ;  <strong><strong>超出元素隐藏</strong></strong>  //  visibility:visible  <strong><strong>超出部分出现</strong></strong></strong></p><p>** **</p><p>** **</p><p><strong>CSS3<strong><strong>样式</strong></strong></strong></p><p><strong>1.<strong><strong>过渡（<strong><strong>transition</strong></strong>）：</strong></strong></strong></p><p>transition:all /width  1s     ease/ease-in/…/linear[匀速]     1s;</p><p>样式   过渡时间  [时间函数,默认ease]       [延迟]</p><p>Transition-property:width height;</p><p>Transition-duration:1s;</p><p>Transition-timing-function:linear;</p><p>Transition-timing-function:cubic-bezier(0.98,0.38,0.21,1.06) 贝塞尔曲线</p><p>Transition-delay:initial;</p><p>Transition-delay:1s;****</p><p>1. ** 2D****（<strong><strong>transform</strong></strong>）******</p><p><strong>(1)<strong><strong>平移</strong></strong></strong></p><p><strong>样式名：<strong><strong>transform;</strong></strong></strong></p><p><strong>样式值：<strong><strong>translate;(x,y)<strong><strong>平移</strong></strong>   /  translateX(number);   /translateY(number);</strong></strong></strong></p><p>1. <strong>旋转</strong>****</p><p>**  Rotate(value);   <strong><strong>角度</strong></strong>45deg/-45deg  rad<strong><strong>弧度</strong></strong>   turn<strong><strong>圈数</strong></strong>**</p><p><strong>(3)<strong><strong>缩放</strong></strong></strong></p><p>**  Scale(x,y)    scaleX(value)    ScaleY(valuer)******</p><p>1. <strong>斜切</strong>****</p><p>**  Skew(x,y)            SkewX(value)   skexY(value)******</p><p>** **</p><p>** **</p><p>**Box-shadow:0 10px 10px 5px rgba(0,0,0,1) ******</p><p><strong>阴影：<strong><strong>Box-shadow</strong></strong></strong></p><p><strong>Box-shadow:;</strong>****</p><p><strong>X<strong><strong>轴偏移量</strong></strong></strong></p><p><strong>Y<strong><strong>轴偏移量</strong></strong></strong></p><p><strong>阴影的模糊程度</strong>****</p><p><strong>阴影的大小</strong>****</p><p><strong>阴影的颜色</strong>****</p><p><strong>[inset]</strong>****</p><p>** **</p><p>** **</p><p>1. ** 3D******</p><p>**场景：<strong><strong>Perspective:500px;   <strong><strong>灭点</strong></strong>   /perspective-origin</strong></strong>：**<strong>x,y   <strong><strong>观察者的位置</strong></strong></strong></p><p><strong>平移：沿<strong><strong>z</strong></strong>轴平移</strong>**   Transform:translateZ(length);   trsnslate3d(length,length,length)******</p><p><strong>旋转：<strong>transform:rotateY/X/Z(*turn);   / **** rotate3d(0,0,0,angle) **** /</strong></strong> ****Transform-origin: Top content  left;</p><ul><li><p>rotate3d(1,0,1,45deg)          <strong>改变圆点</strong></p></li><li><p>Transform-style:preseve-3d   <strong><strong>保持</strong></strong>3d<strong>效果</strong></p></li></ul><p><strong>动画：</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">@keyframes animation1(*动画1)&#123;From/0%&#123;Width:100px;Height:100px;     Border-radius:50%;&#125;To/100%&#123; Width:200px;Height:200px; Border-radius:0;&#125;.box&#123;Animation:animation1  2s ease 0s;Forwards 2;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**渐变：**background-image</p><ol><li><p>**线性渐变：**background-image:repeating-linear-gradient(to right/45deg, red 50%,green,blue);</p></li><li><p><strong>重复渐变 默认上</strong></p></li><li><p><strong>径向渐变：<strong>background-image</strong></strong>：****repeating-radial-gradient(red 50%,green 70%);</p></li></ol><p><strong>颜色的表示方式：</strong></p><p>1. 颜色的单词：black,pink,yellow等等；</p><p>2. 十六进制的色值：#000  #fff  #202020等等；</p><p>3. RGB(red,green,blue的程度（0-255）)：RGB(255,0,0)红色   RGB(0 255 0)绿色   RGB(000)   黑色   RGB(255,255,255)白色</p><p>4. Rgba([0-255]  [0-255]    [0-255]    [0-1]设置成0为透明色)</p><p>** **</p><p><strong>背景图</strong>****</p><p>Background-image:url(“…/img/**.jpg”)</p><p>Background-color:pink;（背景颜色）</p><p>Background-size:200px auto:背景图尺寸   仅有200px 值为背景图的宽度</p><p>Background-size:cover;   覆盖铺买整个界面</p><p>Background-size:contain;   背景图片优先，最大程度的呈现图片（背景图为图片的原尺寸）</p><p>Background-repeat:no-repeat; 取消重复设置</p><p>Background-repeat:repeat-x/y;    在x轴或y轴重复设置</p><p>Background-position:100px   100px;  背景图片的定位(100px为x轴和y轴的数值)</p><p>Background-position:right bottom;   背景图片在右下角</p><p>Background-position:right ;  背景图片在右中</p><p>Background-origin:border-box;    盒子背景图的渲染位置</p><p>Border-box  边框内 /   padding-box  内填充内（默认） /  content-box  内容内</p><p>Background-clip:content-box;     盒子背景图裁剪位置</p><p>Border-box  边框外裁剪（默认）   padding-box      content-box</p><p>Background-attachment:fixed(固定);</p><p>图片精灵（雪碧图）</p><p>.fanke1{</p><p>​width: 113px;</p><p>​height: 42px;</p><p>​border: 1px solid red;</p><p>​text-align: center;</p><p>​margin: 0 auto;</p><p>​margin-top: 200px;</p><p>​background-image:url(‘…/img/spritesbgtop.png’) ;</p><p>​background-repeat: no-repeat;</p><p>​background-position: 0 -581px;</p><p>}</p><p></p><p><strong>定位</strong>**(position)<strong><strong>脱离文档流：</strong></strong>**</p><p>1. <strong>相对定位</strong>**(relative)******</p><p><strong>相对自身去定位。保留原来的位置（文档层中的位置）</strong>****</p><p>1. <strong>绝对定位</strong>**(absolute)******</p><p><strong>相对于“拥有定位属性（样式）”的父元素去定位。如果父元素没有定位属性，会一直向上一级寻找，直到找到拥有定位属性定位的元素停止。如果一直找不到相对于<strong><strong>html</strong></strong>定位。完全脱离文档流。</strong>****</p><p><strong>3.<strong><strong>固定定位</strong></strong>(fixed)</strong>****</p><p><strong>相对于浏览器的四个边去定位</strong>**.<strong><strong>完全脱离文档流</strong></strong>**</p><p><strong>定位的元素会多出五个样式：</strong>****</p><p><strong>Top  right   bottom  left  z-index(<strong><strong>层级</strong></strong>)</strong>****</p><p>** **</p><p>** **</p><p><strong>定位的居中方式：</strong>****</p><p>1. <strong>水平居中</strong>****</p><p>2. <strong>position:absolute;</strong>****</p><p>**     Top:0;******</p><p>**     Left:50%;******</p><p>**     Margin-left:50%;******</p><p>1. <strong>position:absolute;</strong>****</p><p><strong>Top:0;</strong>****</p><p><strong>Left:0;</strong>****</p><p><strong>Right:0;</strong>****</p><p><strong>Margin:0 auto;</strong>****</p><p><strong>·<strong><strong>left</strong></strong>权重比<strong><strong>right</strong></strong>权重高</strong>****</p><p>**  Top<strong><strong>权重比</strong></strong>bottom<strong><strong>权重高</strong></strong>**</p><p>1. <strong>垂直居中</strong>****</p><p>**   (1)Position:absolute;******</p><p>**   Top:0;******</p><p>**   Margin-top:-50px;******</p><p>**    (2)Position:absolute;******</p><p>**     Top:0;******</p><p>**    Bottom:0;******</p><p>**   Margin:0 auto;   ******</p><p>1. <strong>绝对居中</strong>**  ******</p><p><strong>(1)position:absolute</strong>****</p><p>**      Top:50%;******</p><p>**      Margin-top:-50px;******</p><p><strong>Left:50%;</strong>****</p><p><strong>Margin-left:-50pxs;</strong>****</p><p>** **</p><p><strong>(2)position:absolute</strong>****</p><p>**      Top:0;******</p><p><strong>Right:0;</strong>****</p><p><strong>Bottom:0;</strong>****</p><p><strong>Left:0;</strong>****</p><p><strong>Margin:auto;</strong>****</p><p>** **</p><p>** **</p><p>**<em>*<em>Cursor:pointer   <strong><strong>鼠标经过时变成手型</strong></strong></em></em></p><p>**<em>*<em>list-style:none   <strong><strong>清除列表样式</strong></strong></em></em></p><p>**Outline:none  ******</p><p>**<em>*<em>border-radius:50%   <strong><strong>矩形转换为圆</strong></strong></em></em></p><p>**.box:hover  .bottom{}  box<strong><strong>的子元素移入【只能是子元素】</strong></strong>  ******</p><p><strong>Opacity:0/1;<strong><strong>透明度</strong></strong></strong></p><p>** **</p><p><strong>Ctrl+f<strong><strong>查找</strong></strong></strong></p><p>![](file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wpsE6F9.tmp.png)****</p><p><strong>移动端口</strong>****</p><p>视口：viewport</p><p>缩放：Initial-scale=1.0,maximum-scale=1.0,user-scalable=0(不允许用户进行缩放)</p><p>布局视口：屏幕分配出来可供用户布局的范围。一般是980px。</p><p>视觉视口：设备屏幕的大小。</p><p>理想视口：&lt;meta name=”viewport” content=”Initial-scale=1.0,maximum-scale=1.0,user-scalable=0”&gt;</p><p></p><p>像素</p><p>物理像素：屏幕理所能呈现的最小颜色单元。</p><p>逻辑像素：固定的大小</p><p>css像素：css样式表里所写的像素</p><p>Web css像素==逻辑像素==物理像素（浏览器不放大的情况下）</p><p>移动端&gt;css像素&gt;逻辑像素</p><p></p><p></p><p><strong>弹性布局：<strong><strong>display:flex</strong></strong></strong></p><p>父元素称作为容器，子元素称作为项目，宽度被子元素平分，高度为 auto参照父元素</p><p>引入方式：@import url(“base css”)</p><p>**是否换行：****flex-wrap:**wrap（换行）/no warp(默认不换行)/warp-reverse（反向换行，第一行在下）</p><p>**在主轴的对齐方式：<strong><strong>justify-content</strong></strong>:**flex-start（轴开始的位置）/center（轴中心）/flex-end（轴结束位置）/Space-between（两端对齐）/space-around(平均分配) ****</p><p>**主轴方向排列：****flex-direction:**row(行)  row-reverse(行反向)/ column(列)  column-reverse</p><p><strong>主轴方向</strong>row从左到右，row-reverse从右到左</p><p><strong>Column从上到下</strong>     column-reverse   <strong>从下到上</strong></p><p>** **</p><p>**项目在单行的对齐方式，单行操作:**align-items:**flex/flex-end/center/baseline</p><p>Flex   轴开始</p><p>Center  轴中心（在一行内居中）</p><p>Flex-end   轴结束</p><p>Baseline    基线</p><p>**项目在多行的对齐方式，多行操做：**Align-content:**flex-start/center/flex-end/space-between/space-around</p><p><strong>对项目的操作：<strong><strong>order</strong></strong>:0</strong>(默认为0，容器中的项目从小到大排列)</p><p>**放大项目：****flex-grow:**0;(默认为不放大为0)</p><p>**缩小项目：****flex- Shrink:**1;(默认为1)</p><p>**项目自身对齐：**Align-self:**flex-start/center/flex-end/space-between/space-around;</p><p>**项目宽度：Flex-basis:**200px;相当于width:200px;</p><p></p><p></p><p></p><p><strong>Git分布式版本控制工具</strong></p><p>工作区     暂存区（本地仓库）    远程仓库</p><p>Cd 打开指令后边空格</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset --hard</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset --hard<br>桌面创建coding文件夹</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset --hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset --hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)<br>Git空格clone空格coing网页地址</p><p>Cd 打开指令后边空格 <br>Git分布式版本控制公具<br>工作区  暂存区(本地仓库)  远程仓库 <br>Git   clone克隆    git clone http//.  <br>Git add .   (添加 .代表新建以及修改过得文件)<br>Git  Status( 查看创建的文件状态)   git commit –m”初始化”<br>Git push  回车(推送)   git log 查看历史版本  git reset --hard<br>桌面创建coding文件夹<br>Cd空格(coding文件夹地址)<br>Git空格clone空格coing网页地址<br>Cd空格xiaomi   5. git add空格.</p><p>**</p><p><strong>H5表单控件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”index.php”</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”/get/post”</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                         提交方式&lt;input type=”text”name=”username” value=”” required  minlength=”5” maxlength=”10” readonly  auto/autocomplete =”off”(自动补充开关)><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       属性      名字        属性值       必填项     最少输入字符数     最多输入字符数        只读密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”password”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”password”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”123456”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>男:&lt;input  type=”radio” name=”sex”value=”1”>女:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”radio”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”sex”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”0”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>爱好：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”checkbox”</span> <span class="token attr-name">checked(默认选中)</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”hobby”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”0”</span><span class="token punctuation">></span></span>游泳      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”checkbox”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”hobby”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”1”</span><span class="token punctuation">></span></span>轮滑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”checkbox”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”hobby”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”2”</span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>文件：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”file”</span> <span class="token attr-name">multiple(多选)</span><span class="token punctuation">></span></span>下拉框：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”city”</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>””</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”2”(框内显示个数)</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”0”</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”1”</span> <span class="token attr-name">selected(默认选中)</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”2”</span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>简介：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”info”</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span>””</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”30”(字数)</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”10”（行）</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>数字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”number”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”number”</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”10”</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”0”</span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”2”(步进值)</span><span class="token punctuation">></span></span>滑块：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”range”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”number”</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”10”</span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”0”</span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”2”(步进值)</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”1”</span><span class="token punctuation">></span></span>日历：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”date”</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”month”</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”week”</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”time”</span><span class="token punctuation">></span></span> 年 年+月 年+周 年+时间颜色：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”color”</span><span class="token punctuation">></span></span>网址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”url”required</span><span class="token punctuation">></span></span>邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”email”</span><span class="token punctuation">></span></span>电话：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”tel”</span><span class="token punctuation">></span></span>搜索：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”search”</span><span class="token punctuation">></span></span>提示：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”text”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>””</span> <span class="token attr-name">autofocus</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”请输入用户名”</span><span class="token punctuation">></span></span>     提示信息提交:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”submit”disabled</span> <span class="token attr-name">(不可使用)</span><span class="token punctuation">></span></span>           按钮：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”button”</span><span class="token punctuation">></span></span>重置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>”reset”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IDName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS笔记</title>
      <link href="/2016/04/25/ps%E7%AC%94%E8%AE%B0/"/>
      <url>/2016/04/25/ps%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>2017.10.9  PS笔记</strong></p><h2 id="1-像素-分辨率：">1.像素/分辨率：</h2><p><strong>屏幕显示一般使用72PPI（密度）</strong></p><p><strong>印刷一般使用300PPI</strong></p><p><strong>RGB:红，绿，蓝  用于屏幕显示</strong></p><p><strong>CMYK:青，品红，黄，黑   用于彩色印刷</strong></p><h2 id="2-存储格式">2.存储格式</h2><p><strong>PSD格式 photoshop格式，保存图层等，可以多次编辑图像</strong></p><p><strong>JPG/JPEG:图片格式，不支持透</strong></p><p><strong>GIF:支持透明，有损压缩</strong></p><p><strong>PNG：存储空间小，支持透明，无损压缩</strong></p><h2 id="3-快捷键"><strong>3.快捷键:</strong></h2><p><strong>新建画布：Ctrl+N</strong></p><p><strong>打开文件：ctrl+o</strong></p><p><strong>找图层：Ctrl</strong></p><p><strong>加选图层：ctrl</strong></p><p><strong>多选图层：shift</strong></p><p><strong>新建图层：Ctrl+shift+alt+n</strong></p><p><strong>移动图层：ctrl+『上移</strong></p><pre><code>            **Ctrl+』下移**</code></pre><p><strong>图层置顶或者置底：Ctrl+shfit+『』</strong></p><h2 id="4-填充色"><strong>4.填充色:</strong></h2><p><strong>默认前景色和背景色：D</strong></p><p><strong>切换前景色背景色：X</strong></p><p><strong>前景色：alt+delete</strong></p><p><strong>背景色：Ctrl+delete</strong></p><p><strong>原位复制：Ctrl+j</strong></p><p><strong>复制键：alt</strong></p><p><strong>选中选区：ctrl   点击小方块</strong></p><p><strong>取消选区</strong>：Ctrl+D</p><p><strong>选区换色方法适用于矩形，正方形</strong></p><p><strong>羽化：shift+f6</strong></p><p><strong>返回一步：Ctrl+Z</strong></p><p><strong>连续返回：ctrl+alt+z</strong></p><p><strong>按住AIT键，转动鼠标滚轮，放大缩小画布</strong></p><p><strong>放大缩小画布：Ctrl+ + 或 -</strong></p><p><strong>按住空格键，拖动画布</strong></p><p>** **</p><p><strong>打开或关闭标尺：Ctrl+R</strong></p><p>** **</p><p><strong>调整选区大小：Alt+S+t</strong></p><p><strong>自由变换：Ctrl+T</strong></p><p><strong>反选：Ctrl+Shift+I</strong></p><p><strong>复制变换：Ctrl+alt+shift+T</strong></p><p><strong>新建组：Ctrl+G</strong></p><p><strong>路径变选区：Ctrl+回车键</strong></p><p><strong>关闭或打开路径：Ctrl+Shift+H</strong></p><p>** **</p><p><strong>按住ALT键可同时缩放物体两边的宽度</strong></p><p><strong>裁剪出的背景颜色为，背景色中的颜色</strong></p><p><strong>魔棒容差值越小越精细</strong></p><p><strong>切片工具存储WEB格式为：PNG-24</strong></p><p><strong>按住Alt键选择可见的图层。其他图层就可以全部关闭。反之打开</strong></p><p>** **</p><p><strong>矢量图</strong></p><p><strong>矢量图经过放大缩小不会失真</strong></p><p><strong>双击缩略图可更改颜色</strong></p><p>**</p><h2 id="5-工具">5.<strong>工具</strong></h2><p><strong>钢笔工具：</strong></p><p><strong>路径：</strong></p><p><strong>ALT键点击锚点可以删除其中的一个方向点，CTRL结束绘制</strong></p><p><strong>ALT</strong>**:**<strong>锚点在最后一个时，点击锚点可以重新绘制路径，锚点在中间是时，点击锚点可以去点把手，曲线变质先（尖角）；拖动锚点时，可以直线变回曲线。可以调整并断开单侧把手。</strong></p><p><strong>Ctrl</strong>:<strong>可以拖动锚点；可以调整双侧把手</strong></p><p>** **</p><p><strong>画笔工具：颜色为前景色，按住ALT键，点击右键左右缩放大小</strong>*</p><p><strong>【】调正画笔大小</strong></p><h2 id="6-滤镜">6.滤镜</h2><p><strong>祛痘：</strong></p><p><strong>1.背景拷贝</strong></p><ol><li><p><strong>污点修复工具大概祛下痘</strong></p></li><li><p><strong>通道选择我绿色拷贝</strong></p></li><li><p><strong>滤镜-其他-高反差保留（选择数值6）</strong></p></li><li><p><strong>图像-应用图像-线性光（重复直到无差时选择重叠）</strong></p></li><li><p><strong>选择通道绿色拷贝选区-返回图层-反选</strong></p></li></ol><p><strong>7.图层样式-曲线（微调，觉得不够重复以上步骤）</strong></p><p>**</p><p><strong>素描：1.复制图层，去色</strong></p><p><strong>2.复制图层，反相</strong></p><p>​    <strong>3.调整图层混合模式，正常变为颜色渐大或者线性简淡</strong></p><p>​   <strong>4.滤镜-其他-最小值（1-3）</strong></p><p>​   <strong>5.图层样式，混合选项中，在颜色混合带中，按住ALT键进行调整（下一个图层·）</strong></p><p>​   <strong>6.添加蒙版，在蒙版上添加杂色（200-300）选中蒙版-动感模糊</strong></p><p>**</p><p><strong>字体：</strong></p><p><strong>行间距取字号的1.5到2倍（80像素的字体应在120到160之间）</strong></p><p><strong>排版：用英文时，取左对齐；中文使用最后一行左对齐</strong></p><p><strong>避头尾法则设置，一定要设置宽松严格都可以</strong></p><p><strong>字体：中文一般使用微软雅黑，英文使用HELVETICA</strong></p><p>​   <strong>苹方              San Farncisco</strong></p><p><strong>画图技巧</strong></p><p>画同心圆：</p><p>ctrl+r标尺，在横纵标尺的交叉部分，和鼠标十字相重合，鼠 标左键+shift+alt画同心圆。</p><p><strong>同轴（中心）旋转效果</strong></p><p><strong>1.自由变换：Ctrl+T</strong></p><p><strong>2.按住ALT键调整重心位置</strong></p><p><strong>3.调整旋转度数</strong></p><p><strong>4.复制变换：Ctrl+alt+shift+T</strong></p><p><strong>作业中水温表彩色圆环的画法</strong>：先画一个圆只描边不填充，然后用标尺架一个十字，套索画出选区填充，之后剪贴蒙版，依次画</p><p><strong>关于蒙版</strong></p><p>![](file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wps5007.tmp.jpg)</p><p>1. 图片添加蒙版</p><p>2.选择画笔涂抹（黑色删除，灰色恢复）</p><p><strong>图层样式：</strong></p><p><strong>图层样式中如果要在渐变叠加上剪贴蒙版要在混合选项中</strong>![](file:///C:\Users\vicgoo\AppData\Local\Temp\ksohtml\wps3162.tmp.jpg)</p><p><strong>将剪贴图层混合成组前面的对勾取消，内部效果前面打勾</strong></p><p></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
